{"version":3,"sources":["views/PoolFinder/index.tsx","components/Loader/Dots.tsx","utils/currencyId.ts","hooks/useTotalSupply.ts","components/PositionCard/index.tsx","views/Page.tsx","components/Links/index.tsx"],"names":["Fields","StyledButton","styled","Button","theme","colors","input","text","PoolFinder","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","showCommonBases","selectedCurrency","onPresentCurrencyModal","title","subtitle","backTo","style","gap","endIcon","onClick","ml","symbol","as","Row","justifyItems","backgroundColor","borderRadius","to","justify","currencyId","INVALID","fontWeight","LOADING","Dots","span","Token","address","Error","useTotalSupply","token","contract","useTokenContract","totalSupply","useSingleCallResult","result","TokenAmount","toString","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","token0","unwrappedToken","token1","showMore","setShowMore","userPoolBalance","totalPoolTokens","poolTokenPercentage","greaterThanOrEqual","Percent","getLiquidityValue","token0Deposited","token1Deposited","color","bold","margin","size","small","toSignificant","toFixed","asset","fontSize","role","FullPositionCard","props","justifyContent","p","flexDirection","alignItems","mb","BIG_INT_ZERO","Link","variant","width","startIcon","SwapWrapper","div","Page","children","className","StyledInternalLink","primary"],"mappings":"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","file":"static/js/9.40bb58d2.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from '../../hooks/usePairs'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      showCommonBases\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          showCommonBases\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}\n","import styled from 'styled-components'\n\nconst Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport default Dots\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubNav from 'components/Menu/SubNav'\nimport { useTranslation } from 'contexts/Localization'\n\nconst SwapWrapper = styled.div`\n  background-color: #910101;\n  padding-bottom: 60px;\n`\n\nconst Banner = () => {\n  return (\n    <>\n      <div className='banner-wrapper-area hide-ifMobile'>\n        <div className='container'>\n          <div className='row align-items-center m-0'>\n            <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-content'>\n                <h2>ZAP MIRRORS PANCAKESWAP TO EXECUTE QUICK TOKEN SWAP CONVERSION</h2>\n              </div>\n            </div>\n            <div className='col-xl-4 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-image'>\n                <img src='/images/decor-img.png' alt='logo' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <SwapWrapper {...props}>\n        <h1 className=\"page-red-header hide-ifMobile\">{t(\"ZAP\")}</h1>\n        {/* remove padding top when openback subnav */}\n        <div className=\"swap-container\">\n          {/* <SubNav /> */}\n          {children}\n        </div>\n      </SwapWrapper>\n    </>\n  )\n}\n\nexport default Page\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}