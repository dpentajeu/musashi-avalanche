{"version":3,"sources":["hooks/useEthTokenBalance.ts","config/constants/bridgeTokens.ts","config/constants/bridgeNetworks.ts","views/Bridge/components/styleds.tsx","components/BridgeInputPanel/NumericalInput.tsx","components/BridgeInputPanel/CurrencyRow.tsx","components/BridgeInputPanel/NetworkRow.tsx","components/BridgeInputPanel/index.tsx","state/bridge/actions.ts","state/bridge/hooks.ts","views/Bridge/components/LearnMoreModal.tsx","views/Bridge/hooks/useSendToken.ts","views/Bridge/components/ConfirmModal.tsx","views/Bridge/hooks/useBridgeGetSwaps.ts","views/Bridge/index.tsx","views/Bridge/hooks/useCmsContent.ts","views/Bridge/hooks/useBridgeSwaps.ts","views/Bridge/hooks/useBridgeGetNetworkInfo.ts","views/Bridge/hooks/useBridgeTokens.ts","utils/prices.ts","utils/trades.ts","hooks/Trades.ts","hooks/useParsedQueryString.ts","utils/maxAmountSpend.ts","hooks/ENS/useENS.ts","hooks/ENS/useENSName.ts","hooks/ENS/useENSAddress.ts"],"names":["FetchStatus","bridgeTokens","eth","symbol","address","decimals","projectLink","usdt","bridgeNetworks","bsc","name","imgLink","bridgeLabel","ethereum","Wrapper","styled","div","clickable","css","Text","theme","severity","colors","failure","warning","text","success","button","background","dropdown","attrs","ellipsis","AutoColumn","StyledInput","input","error","align","textSubtle","inputRegex","RegExp","Input","React","memo","value","onUserInput","placeholder","rest","t","useTranslation","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","MenuItem","RowBetween","disabled","selected","CurrencyRow","currency","onSelect","isSelected","otherSelected","style","account","useActiveWeb3React","key","Token","ETHER","currencyKey","useCurrencyBalance","undefined","className","onClick","size","Column","bold","color","small","maxWidth","NetworkRow","network","isSelectedNetwork","InputRow","BridgeSelectButton","Button","variant","scale","LabelRow","InputPanel","BalanceText","CustomRightIcon","ChevronRightIcon","GreyLabel","MNumericalInput","NumericalInput","BridgeCardBody","CardBody","mediaQueries","md","BridgeCardFlex","Flex","DestinationFlex","DestinationText","ArrowWrapper","MobileArrowWrapper","Container","TokenInfoFlex","BridgeInputPanel","estimatedValue","balance","minAmount","maxAmount","onMax","label","showMaxButton","onCurrencySelect","onFromSelect","fromNetwork","onToSelect","toNetwork","disableCurrencySelect","hideBalance","pair","hideInput","otherCurrency","id","showCommonBases","onSwitchNetwork","selectedCurrencyBalance","translatedLabel","useModal","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","currencyList","useCurrency","useState","isOpen","setIsOpen","menuClass","toggleOpen","isOpenFromNetwork","setIsOpenFromNetwork","menuClassFromNetwork","toggleOpenFromNetwork","isOpenToNetwork","setIsOpenToNetwork","menuClassToNetwork","toggleOpenToNetwork","Boolean","currencyEquals","shortenAccountAddress","shortenAddress","otherSelectedNetworkFrom","otherSelectedNetworkTo","handleSwitchNetwork","width","alignItems","justifyContent","currency0","token0","currency1","token1","margin","marginRight","fontSize","length","slice","marginLeft","map","oneCurrency","currencyInList","handleSelect","textAlign","flexDirection","Object","keys","index","networkName","onefromNetwork","oneToNetwork","marginTop","display","cursor","padding","borderRadius","val","amount","Field","selectCurrency","createAction","switchCurrencies","typeInput","setRecipient","useSwapState","useSelector","state","swap","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","liquidityToken","useDerivedSwapInfo","inputError","independentField","typedValue","inputCurrencyId","INPUT","currencyId","outputCurrencyId","OUTPUT","recipient","inputCurrency","outputCurrency","recipientLookup","useENS","to","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","typedValueParsed","parseUnits","toString","TokenAmount","JSBI","BigInt","CurrencyAmount","ether","console","debug","tryParseAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","v2Trade","currencyBalances","currencies","formattedTo","isAddress","indexOf","useUserSlippageTolerance","allowedSlippage","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","balanceIn","amountIn","lessThan","MModal","backgroundDisabled","CmsModal","LearnMoreModal","content","onDismiss","useWeb3React","useTheme","headerBackground","dangerouslySetInnerHTML","__html","useSendToken","tokenContract","onSendToken","useCallback","toAddress","a","transfer","BigNumber","times","BIG_TEN","pow","tx","wait","receipt","Divider","DepositAddressText","ConfirmModal","_id","depositAddress","onInActionLockButtonChange","fromContract","chainId","useToast","toastError","toastSuccess","fastRefresh","useRefresh","pendingTx","setPendingTx","setSwapData","changeNetworkNeed","setChangeNetworkNeed","handleSendToken","handleBridgeGetSwaps","onBridgeGetSwaps","baseUrl","process","axios","get","response","data","handleSendEth","NOT_FETCHED","fetchStatus","setFetchStatus","library","aAccount","aLibrary","useEthActiveWeb3React","onSendEth","testSigner","getSigner","sendTransaction","from","ethers","utils","toHexString","transactionHash","SUCCESS","FAILED","useSendEth","handleInActionLockButtonChange","newInAction","newLockButton","useEffect","result","getSwapInfo","handleConfirmClick","status","mb","isLoading","endIcon","spin","mt","ConnectWalletButton","BridgeWrapper","InjectedConnector","supportedChainIds","BridgeOuterWrapper","tempButton","LearnMoreText","Banner","src","alt","Bridge","_page","_locale","currentLanguage","activate","initialSwapData","createTime","walletAddress","walletNetwork","networkFeePromoted","networkFee","swapFeeRate","swapFee","depositAddressLabel","depositAddressLabelName","depositTimeout","isClickConfirmRef","useRef","isOpenedRef","setAmount","setBalance","contractDecimal","setContractDecimal","swapData","swapDataRef","handleCmsContent","locale","onCmsContent","params","page","language","bridge","cmsContent","setCmsContent","getCms","onLearnMore","approval","approvalSubmitted","setApprovalSubmitted","parsedAmounts","inputAmount","outputAmount","maxAmountInput","maxAmountSpend","atMaxAmountInput","equalTo","dispatch","useDispatch","onCurrencySelection","field","onSwitchTokens","onChangeRecipient","useSwapActionHandlers","handleMaxInput","toExact","handleTypeInput","getAddress","setSelectedCurrency","selectedToken","toLowerCase","selectedFromNetwork","setSelectedFromNetwork","selectedFromNetworkRef","selectedToNetwork","setSelectedToNetwork","selectedToNetworkRef","connectorId","window","localStorage","getItem","connectorLocalStorageKey","setupEthNetwork","connectorsByNameBridge","setupNetwork","switchN","changedWalletErc20Contract","useERC20Bridge","getAddressEth","ethBalance","BIG_ZERO","useLastUpdated","lastUpdated","setLastUpdated","ethRpcProvider","getBalance","walletBalance","fetchBalance","refresh","useGetBnbBalanceEth","current","getContract","bep20Abi","balanceOf","res","decimalRes","formattedBalance","getFullDisplayBalanceFull","_address","_symbol","_fromNetwork","_amount","_toAddress","_toNetwork","_walletNetwork","inAction","setInAction","lockButton","setLockButton","onConfirm","handleBridgeSwaps","toNumber","onBridgeSwaps","post","handleBridgeGetTokens","onBridgeGetTokens","handleBridgeGetNetworkInfo","onBridgeGetNetworkInfo","bcSymbol","bscContractAddress","bscContractDecimal","bscGasExchangeEnabled","bscGasExchangeNetworkFee","bscSymbol","enabled","ethContractAddress","ethContractDecimal","ethSymbol","icon","promotion","tokenInfo","setTokenInfo","networkInfo","setNetworkInfo","getTokenInfo","selectedTokenInfo","tokens","find","getNetworkInfo","selectedNetworkInfo","networks","isNaN","isLessThan","onClickConfirm","marginBottom","ml","App","newSelectedCurrency","newSelectedFrom","previousSelectedNetwork","newSelectedTo","lastSelectedFromNetworkRef","isBrowser","whiteSpace","textDecoration","BASE_FEE","Percent","ONE_HUNDRED_PERCENT","subtract","pct","basisPointsToPercent","maximumAmountIn","minimumAmountOut","isTradeBetter","tradeA","tradeB","minimumDelta","ZERO_PERCENT","tradeType","Error","executionPrice","raw","multiply","add","useAllCommonPairs","currencyA","currencyB","wrappedCurrency","tokenA","tokenB","bases","useMemo","common","BASES_TO_CHECK_TRADES_AGAINST","additionalA","ADDITIONAL_BASES","additionalB","basePairs","flatMap","base","otherBase","allPairCombinations","filter","t0","t1","tokenA_","tokenB_","customBases","CUSTOM_BASES","customBasesA","customBasesB","equals","allPairs","usePairs","values","PairState","EXISTS","reduce","curr","currencyAmountIn","currencyOut","allowedPairs","useUserSingleHopOnly","singleHopOnly","Trade","maxHops","maxNumResults","bestTradeSoFar","i","currentTrade","BETTER_TRADE_LESS_HOPS_THRESHOLD","currencyIn","currencyAmountOut","useIsTransactionUnsupported","unsupportedTokens","useUnsupportedTokens","tokenIn","tokenOut","includes","useParsedQueryString","search","useLocation","parse","parseArrays","ignoreQueryPrefix","currencyAmount","greaterThan","MIN_BNB","nameOrAddress","validated","reverseLookup","debouncedAddress","useDebounce","ensNodeArgument","namehash","substr","registrarContract","useENSRegistrarContract","resolverAddress","useSingleCallResult","resolverAddressResult","resolverContract","useENSResolverContract","isZero","changed","ENSName","loading","useENSName","lookup","ensName","debouncedName","addr","useENSAddress"],"mappings":"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","file":"static/js/10.2b2326fe.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { ethers, utils } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider, ethRpcProvider } from 'utils/providers'\nimport useActiveWeb3React, { useEthActiveWeb3React } from 'hooks/useActiveWeb3React'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useEthTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useGetBnbBalanceEth = () => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await ethRpcProvider.getBalance(account)\n        setBalance(new BigNumber(walletBalance.toString()))\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch {\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus])\n\n  return { balance, fetchStatus, refresh: setLastUpdated }\n}\n\nexport const useSendEth = (toAddress: string, amount: string) => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const { account, library: cLibrary } = useWeb3React()\n  const {  account: aAccount, library: aLibrary } = useActiveWeb3React()\n  const { account: ethAccount, library } = useEthActiveWeb3React()\n\n  // useEffect(() => {    \n  //   const sendEth = async () => {\n  //     try {\n  //       const params = [{\n  //         from: ethAccount,\n  //         to: toAddress,\n  //         value: ethers.utils.parseUnits(amount, 'ether').toHexString()\n  //       }];\n  //       const testSigner = aLibrary.getSigner(aAccount)\n  //       console.log(ethAccount)\n  //       console.log(testSigner)\n\n  //       const transactionHash = await testSigner.sendTransaction({\n  //         from: aAccount,\n  //         to: toAddress,\n  //         value: ethers.utils.parseUnits(amount, 'ether').toHexString()\n  //       })\n  //       console.log(transactionHash)\n  //       setFetchStatus(FetchStatus.SUCCESS)\n  //     } catch(err) {\n  //       setFetchStatus(FetchStatus.FAILED)\n  //       console.log(err)\n  //     }\n  //   }\n\n  //   if (account) {\n  //     sendEth()\n  //   }\n  // }, [aAccount, aLibrary, account, amount, cLibrary, ethAccount, library, setFetchStatus, toAddress])\n\n  const handleSendEth = useCallback(async () => {\n    try {\n      const testSigner = aLibrary.getSigner(aAccount)\n\n      const transactionHash = await testSigner.sendTransaction({\n        from: aAccount,\n        to: toAddress,\n        value: ethers.utils.parseUnits(amount, 'ether').toHexString()\n      })\n      const receipt = await transactionHash.wait()\n      setFetchStatus(FetchStatus.SUCCESS)\n      return receipt\n    } catch(err) {\n      setFetchStatus(FetchStatus.FAILED)\n      return false\n    }\n  }, [aAccount, aLibrary, amount, toAddress])\n\n  return { onSendEth: handleSendEth, fetchStatus }\n}\n\nexport default useEthTokenBalance\n","const bridgeTokens = {\n    eth: {\n        symbol: 'ETH',\n        address: {\n          1: '',\n          3: '0xc778417e063141139fce010982780140aa0cd5ab',\n          4: '0xc778417e063141139fce010982780140aa0cd5ab',\n          56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n          97: '',\n        },\n        decimals: 18,\n        projectLink: 'https://ethereum.org/en/',\n    },\n    usdt: {\n        symbol: 'USDT',\n        address: {\n          1: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n          3: '0xcb38eac3a749e918c0c2d12b610a19cb26301050',\n          4: '0x6ee856ae55b6e1a249f04cd3b947141bc146273c',\n          56: '0x55d398326f99059fF775485246999027B3197955',\n          97: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n        },\n        decimals: 6,\n        projectLink: 'https://tether.to/',\n    }\n}\n\nexport default bridgeTokens\n","const bridgeNetworks = {\n    bsc: {\n        name: 'bsc',\n        symbol: 'BSC',\n        imgLink: 'https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x2170Ed0880ac9A755fd29B2688956BD959F933F8/logo.png',\n        projectLink: 'https://www.binance.org/en/smartChain',\n        bridgeLabel: 'BSC'\n    },\n    ethereum: {\n        name: 'ethereum',\n        symbol: 'Ethereum',\n        imgLink: 'https://pancakeswap.finance/images/tokens/0x2170ed0880ac9a755fd29b2688956bd959f933f8.png',\n        projectLink: 'https://ethereum.org/en/',\n        bridgeLabel: 'ETH'\n    }\n}\n\nexport default bridgeNetworks","import React from 'react'\nimport { Text, ErrorIcon } from '@pancakeswap/uikit'\nimport styled, { css } from 'styled-components'\nimport { AutoColumn } from 'components/Layout/Column'\n\nexport const Wrapper = styled.div`\n  position: relative;\n  padding: 1rem;\n`\n\nexport const ArrowWrapper = styled.div<{ clickable: boolean }>`\n  padding: 2px;\n\n  ${({ clickable }) =>\n    clickable\n      ? css`\n          :hover {\n            cursor: pointer;\n            opacity: 0.8;\n          }\n        `\n      : null}\n`\n\nexport const ErrorText = styled(Text) <{ severity?: 0 | 1 | 2 | 3 | 4 }>`\n  color: ${({ theme, severity }) =>\n    severity === 3 || severity === 4\n      ? theme.colors.failure\n      : severity === 2\n        ? theme.colors.warning\n        : severity === 1\n          ? theme.colors.text\n          : theme.colors.success};\n`\n\nexport const StyledBalanceMaxMini = styled.button`\n  height: 22px;\n  width: 22px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: none;\n  border-radius: 50%;\n  padding: 0.2rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  margin-left: 0.4rem;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  float: right;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n  }\n  :focus {\n    background-color: ${({ theme }) => theme.colors.dropdown};\n    outline: none;\n  }\n`\n\nexport const TruncatedText = styled(Text).attrs({ ellipsis: true })`\n  width: 220px;\n`\n\nconst SwapCallbackErrorInner = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure}33`};\n  border-radius: 1rem;\n  display: flex;\n  align-items: center;\n  font-size: 0.825rem;\n  width: 100%;\n  padding: 3rem 1.25rem 1rem 1rem;\n  margin-top: -2rem;\n  color: ${({ theme }) => theme.colors.failure};\n  z-index: -1;\n  p {\n    padding: 0;\n    margin: 0;\n    font-weight: 500;\n  }\n`\n\nconst SwapCallbackErrorInnerAlertTriangle = styled.div`\n  background-color: ${({ theme }) => `${theme.colors.failure}33`};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  border-radius: 12px;\n  min-width: 48px;\n  height: 48px;\n`\n\nexport function SwapCallbackError({ error }: { error: string }) {\n  return (\n    <SwapCallbackErrorInner>\n      <SwapCallbackErrorInnerAlertTriangle>\n        <ErrorIcon width=\"24px\" />\n      </SwapCallbackErrorInnerAlertTriangle>\n      <p>{error}</p>\n    </SwapCallbackErrorInner>\n  )\n}\n\nexport const SwapShowAcceptChanges = styled(AutoColumn)`\n  background-color: ${({ theme }) => `${theme.colors.warning}33`};\n  padding: 0.5rem;\n  border-radius: 12px;\n  margin-top: 8px;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 18px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React, { CSSProperties } from 'react'\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Button, ChevronRightIcon, Text, Flex, Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport Column from '../Layout/Column'\nimport { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\nimport CircleLoader from '../Loader/CircleLoader'\n\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\n\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n  pointer-events: ${({ disabled }) => disabled && 'none'};\n  :hover {\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.background};\n  }\n  opacity: ${({ disabled, selected }) => (disabled || selected ? 0.5 : 1)};\n`\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`\n\nfunction currencyKey(currency: Currency): string {\n    return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\n}\n\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\n    return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\n}\n\nfunction CurrencyRow({\n    currency,\n    onSelect,\n    isSelected,\n    otherSelected,\n    style,\n  }: {\n    currency: Currency\n    onSelect: () => void\n    isSelected: boolean\n    otherSelected: boolean\n    style: CSSProperties\n  }) {\n    const { account } = useActiveWeb3React()\n    const key = currencyKey(currency)\n    const balance = useCurrencyBalance(account ?? undefined, currency)\n  \n    // only show add or remove buttons if not on selected list\n    return (\n      <MenuItem\n        style={style}\n        className={`token-item-${key}`}\n        onClick={() => (isSelected ? null : onSelect())}\n        disabled={isSelected}\n        selected={otherSelected}\n      >\n        <CurrencyLogo currency={currency} size=\"24px\" />\n        <Column>\n          <Text bold>{currency.symbol}</Text>\n          <Text color=\"textSubtle\" small ellipsis maxWidth=\"200px\">\n            {currency.name}\n          </Text>\n        </Column>\n        {/* <RowFixed style={{ justifySelf: 'flex-end' }}>\n          {chainId === +process.env.REACT_APP_CHAIN_ID? balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null : result}\n          {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\n        </RowFixed> */}\n      </MenuItem>\n    )\n  }\n\nexport default CurrencyRow","import React, { CSSProperties } from 'react'\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Button, ChevronRightIcon, Text, Flex, Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport Column from '../Layout/Column'\nimport { RowFixed, RowBetween } from '../Layout/Row'\nimport { NetworkLogo } from '../Logo'\n\ninterface networkProps {\n  name: string\n  symbol: string\n  imgLink: string\n  projectLink: string\n}\n\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n  pointer-events: ${({ disabled }) => disabled && 'none'};\n  :hover {\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.background};\n  }\n  opacity: ${({ disabled, selected }) => (disabled || selected ? 0.5 : 1)};\n`\n\nfunction NetworkRow({\n    network,\n    onSelect,\n    isSelectedNetwork,\n    otherSelected,\n    style,\n  }: {\n    network: networkProps\n    onSelect: () => void\n    isSelectedNetwork: boolean\n    otherSelected: boolean\n    style: CSSProperties\n  }) {\n    const { account } = useActiveWeb3React()\n  \n    // only show add or remove buttons if not on selected list\n    return (\n      <MenuItem\n        style={style}\n        className={`token-item-${network.name}`}\n        onClick={() => (isSelectedNetwork ? null : onSelect())}\n        disabled={isSelectedNetwork}\n        selected={otherSelected}\n      >\n        <NetworkLogo network={network} size=\"24px\" />\n        <Column>\n          <Text bold>{network.symbol}</Text>\n          {/* <Text color=\"textSubtle\" small ellipsis maxWidth=\"200px\">\n            {network.name}\n          </Text> */}\n        </Column>\n        {/* <RowFixed style={{ justifySelf: 'flex-end' }}>\n          {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\n        </RowFixed> */}\n      </MenuItem>\n    )\n  }\n\nexport default NetworkRow","import React, { useState } from 'react'\nimport { Currency, Pair, currencyEquals } from '@pancakeswap/sdk'\nimport { Button, ChevronRightIcon, Text, useModal, Flex, ArrowDownIcon, ArrowForwardIcon, Box, CardBody, Dropdown } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport bridgeNetworks from 'config/constants/bridgeNetworks'\nimport { useCurrency } from 'hooks/Tokens'\nimport {shortenAddress} from \"utils\";\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo, NetworkLogo } from '../Logo'\nimport { Input as NumericalInput } from './NumericalInput'\nimport CurrencyRow from './CurrencyRow'\nimport NetworkRow from './NetworkRow'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  padding: ${({ selected }) => (selected ? '-0.5rem 0.5rem 0.75rem 1rem' : '-0.5rem 0.75rem 0.75rem 1rem')};\n`\nconst BridgeSelectButton = styled(Button).attrs({ variant: 'text', scale: 'md' })`\n  padding: 0;\n  padding-bottom: 10px;\n  border-radius: 0;\n  justify-content: flex-start;\n  border-bottom: 2px solid #910101;\n  margin-bottom: 20px;\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 1rem;\n  line-height: 1rem;\n`\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-bottom: 2px solid #910101;\n  z-index: 1;\n`\n\nconst BalanceText = styled(Text)`\n  color: #910101;\n  font-weight: bold;\n  font-size: 14px;\n`\n\nconst CustomRightIcon = styled(ChevronRightIcon)`\n  width: 45px;\n  fill: #910101;\n`\n\nconst GreyLabel = styled(Text)`\n  color: #98A1B9;\n  font-weight: bold;\n  // font-size: 25px;\n`\n\nconst MNumericalInput = styled(NumericalInput)`\n  // font-size: 25px;\n`\n\nconst MaxButton = styled(Button)`\n  // font-size: 25px;\n  color: #910101;\n`\n\nconst BridgeCardBody = styled(CardBody)`\n  padding: 20px 0px;\n  box-shadow: 0px 3px 10px rgba(25, 19, 38, 0.15);\n  min-width: 240px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 30px 20px;\n  }\n`\nconst BridgeCardFlex = styled(Flex)`\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\nconst DestinationFlex = styled(Flex)`\n  margin-right: 1.5rem;\n`\nconst DestinationText = styled(Text)`\n  font-weight: 500;\n`\nconst ArrowWrapper = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n    padding: 2px;\n  }\n`\nconst MobileArrowWrapper = styled.div`\n  display: block;\n  padding: 1rem 0;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\nconst ChangeDestinationFlex = styled(Flex)`\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-content: flex-end;\n  }\n`\nconst ChangeDestinationButton = styled(Button)`\n  font-size: 13px;\n  background: #000000;\n`\n\nconst Container = styled.div<{ hideInput: boolean }>`\n`\n\nconst TokenInfoFlex = styled(Flex)`\n  justify-content: normal;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-content: space-between;\n    flex-direction: row;\n  }\n`\n\ninterface networkProps {\n  name: string\n  symbol: string\n  imgLink: string\n  projectLink: string\n}\n\ninterface BridgeInputPanelProps {\n  value: string\n  estimatedValue: number\n  balance: string\n  minAmount: number\n  maxAmount: number\n  onUserInput: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  onFromSelect: (from: string) => void\n  fromNetwork?: string | null\n  onToSelect: (to: string) => void\n  toNetwork?: string | null\n  hideBalance?: boolean\n  pair?: Pair | null\n  hideInput?: boolean\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n  onSwitchNetwork: () => void\n}\n\nexport default function BridgeInputPanel({\n  value,\n  estimatedValue,\n  balance,\n  minAmount,\n  maxAmount,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label,\n  onCurrencySelect,\n  currency,\n  onFromSelect,\n  fromNetwork,\n  onToSelect,\n  toNetwork,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  hideInput = false,\n  otherCurrency,\n  id,\n  showCommonBases,\n  onSwitchNetwork,\n}: BridgeInputPanelProps) {\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n  const translatedLabel = label || t('Input')\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n    />,\n  )\n\n  const currencyList: Currency[] = [useCurrency('0x2170Ed0880ac9A755fd29B2688956BD959F933F8'), useCurrency('0x55d398326f99059fF775485246999027B3197955')]  // to be declare separately by json\n  const [isOpen, setIsOpen] = useState(false)\n  const menuClass = `dropdown-menu${isOpen ? \" show\" : \"\"}`\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  // For from network\n  const [isOpenFromNetwork, setIsOpenFromNetwork] = useState(false)\n  const menuClassFromNetwork = `dropdown-menu${isOpenFromNetwork ? \" show\" : \"\"}`\n  const toggleOpenFromNetwork = () => setIsOpenFromNetwork(!isOpenFromNetwork);\n\n  // For to network\n  const [isOpenToNetwork, setIsOpenToNetwork] = useState(false)\n  const menuClassToNetwork = `dropdown-menu${isOpenToNetwork ? \" show\" : \"\"}`\n  const toggleOpenToNetwork = () => setIsOpenToNetwork(!isOpenToNetwork);\n\n  const isSelected = (currencyInList: Currency) => Boolean(currency && currencyEquals(currency, currencyInList))\n  const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\n  const handleSelect = (oneCurrency: Currency) => onCurrencySelect(oneCurrency)\n\n  const shortenAccountAddress = (account)? shortenAddress(account) : \"-\"\n\n  const handleSelectFromNetwork = (onefromNetwork: string) => onFromSelect(onefromNetwork)\n  const handleSelectToNetwork = (oneToNetwork: string) => onToSelect(oneToNetwork)\n\n  const isSelectedFromNetwork = (networkName) =>  Boolean(fromNetwork && fromNetwork === networkName)\n  const otherSelectedNetworkFrom = Boolean(toNetwork && toNetwork === fromNetwork)\n\n  const isSelectedToNetwork = (networkName) =>  Boolean(toNetwork && toNetwork === networkName)\n  const otherSelectedNetworkTo = Boolean(fromNetwork && fromNetwork === toNetwork)\n\n  const handleSwitchNetwork = () => onSwitchNetwork()\n\n  return (\n    <>\n      <GreyLabel>{translatedLabel}</GreyLabel>\n      {/* <Dropdown target={\n        <BridgeSelectButton\n        selected={!!currency}\n        className=\"open-currency-select-button\"\n        // onClick={() => {\n        //   if (!disableCurrencySelect) {\n        //     onPresentCurrencyModal()\n        //   }\n        // }}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            {pair ? (\n              <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={30} margin />\n            ) : currency ? (\n              <CurrencyLogo currency={currency} size=\"30px\" style={{ marginRight: '20px' }} />\n            ) : null}\n            {pair ? (\n              <Text fontSize=\"18px\" id=\"pair\">\n                {pair?.token0.symbol}:{pair?.token1.symbol}\n              </Text>\n            ) : (\n              <Text id=\"pair\" >\n                {(currency && currency.symbol && currency.symbol.length > 20\n                  ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                    currency.symbol.length - 5,\n                    currency.symbol.length,\n                  )}`\n                  : currency?.symbol) || t('Select a currency')}\n              </Text>\n              // <Text id=\"pair\">\n              //   {t('Ethereum')}\n              // </Text>\n            )}\n          </Flex>\n          {!disableCurrencySelect && <CustomRightIcon style={{ marginLeft: 'auto' }} />}\n        </BridgeSelectButton>\n      }>\n        <Box>\n          <Button className=\"lang-btn\"><Text style={{ textAlign: 'start' }}>ETH</Text></Button>\n        </Box>\n      </Dropdown> */}\n      <div className=\"dropdown\">\n        <BridgeSelectButton\n          selected={!!currency}\n          className=\"open-currency-select-button\"\n          data-bs-toggle=\"dropdown\"\n          aria-expanded=\"false\"\n          onClick={toggleOpen}\n          style={{ width: '100%' }}\n          // onClick={() => {\n          //   if (!disableCurrencySelect) {\n          //     onPresentCurrencyModal()\n          //   }\n          // }}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            {pair ? (\n              <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={30} margin />\n            ) : currency ? (\n              <CurrencyLogo currency={currency} size=\"30px\" style={{ marginRight: '20px' }} />\n            ) : null}\n            {pair ? (\n              <Text fontSize=\"18px\" id=\"pair\">\n                {pair?.token0.symbol}:{pair?.token1.symbol}\n              </Text>\n            ) : (\n              <Text id=\"pair\" >\n                {(currency && currency.symbol && currency.symbol.length > 20\n                  ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                    currency.symbol.length - 5,\n                    currency.symbol.length,\n                  )}`\n                  : currency?.symbol) || t('Select a currency')}\n              </Text>\n              // <Text id=\"pair\">\n              //   {t('Ethereum')}\n              // </Text>\n            )}\n          </Flex>\n          {!disableCurrencySelect && <CustomRightIcon style={{ marginLeft: 'auto' }} />}\n        </BridgeSelectButton>\n        <ul className={menuClass} style={{ width: '100%' }} aria-labelledby=\"dropdownMenuButton1\">\n          {currencyList.map((oneCurrency) => (\n            <li><CurrencyRow\n              style={{ width: \"auto\"}}\n              currency={oneCurrency}\n              isSelected={isSelected(oneCurrency)}\n              onSelect={() => {handleSelect(oneCurrency); toggleOpen()}}\n              otherSelected={otherSelected}\n            /></li>\n          ))}\n        </ul>\n      </div>\n      {/* <BridgeSelectButton\n        selected={!!currency}\n        className=\"open-currency-select-button\"\n        // onClick={() => {\n        //   if (!disableCurrencySelect) {\n        //     onPresentCurrencyModal()\n        //   }\n        // }}\n      >\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          {pair ? (\n            <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={30} margin />\n          ) : currency ? (\n            <CurrencyLogo currency={currency} size=\"30px\" style={{ marginRight: '20px' }} />\n          ) : null}\n          {pair ? (\n            <Text fontSize=\"18px\" id=\"pair\">\n              {pair?.token0.symbol}:{pair?.token1.symbol}\n            </Text>\n          ) : (\n            <Text id=\"pair\" >\n              {(currency && currency.symbol && currency.symbol.length > 20\n                ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                  currency.symbol.length - 5,\n                  currency.symbol.length,\n                )}`\n                : currency?.symbol) || t('Select a currency')}\n            </Text>\n            // <Text id=\"pair\">\n            //   {t('Ethereum')}\n            // </Text>\n          )}\n        </Flex>\n        {!disableCurrencySelect && <CustomRightIcon style={{ marginLeft: 'auto' }} />}\n      </BridgeSelectButton> */}\n      <GreyLabel>{t('From')}</GreyLabel>\n      <BridgeCardFlex alignItems=\"center\" justifyContent=\"space-between\">\n        <div className=\"dropdown\">\n        <BridgeCardBody style={{textAlign: \"center\"}} data-bs-toggle=\"dropdown\" aria-expanded=\"false\" onClick={toggleOpenFromNetwork}>\n          <Flex alignItems=\"center\" justifyContent=\"center\">\n            <DestinationFlex flexDirection=\"column\" alignItems=\"center\">\n              <NetworkLogo network={bridgeNetworks[fromNetwork]} size=\"40px\" />\n              {/* <Text id=\"pair\" className=\"text-grey\">\n                {(currency && currency.symbol && currency.symbol.length > 20\n                  ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                    currency.symbol.length - 5,\n                    currency.symbol.length,\n                  )}`\n                  : currency?.symbol) || t('Select a currency')}\n              </Text> */}\n              <Text id=\"pair\">\n                {t(`${bridgeNetworks[fromNetwork].symbol}`)}\n              </Text>\n            </DestinationFlex>\n            <DestinationText className=\"text-grey\">{shortenAccountAddress}</DestinationText>\n          </Flex>\n        </BridgeCardBody>\n          <ul className={menuClassFromNetwork} style={{ width: '100%' }} aria-labelledby=\"dropdownMenuButton2\">\n            {Object.keys(bridgeNetworks).map((key, index) => (\n              <li><NetworkRow\n                style={{ width: \"auto\"}}\n                network={bridgeNetworks[key]}\n                isSelectedNetwork={isSelectedFromNetwork(bridgeNetworks[key].name)}\n                onSelect={() => {handleSelectFromNetwork(bridgeNetworks[key].name); toggleOpenFromNetwork()}}\n                otherSelected={otherSelectedNetworkFrom}\n              /></li>\n            ))}\n          </ul>\n        </div>\n        <ArrowWrapper>\n          <ArrowForwardIcon\n            width=\"25px\"\n            color='text'\n            onClick={handleSwitchNetwork}\n          />\n        </ArrowWrapper>\n        <MobileArrowWrapper>\n          <ArrowDownIcon\n            width=\"25px\"\n            color='text'\n            onClick={handleSwitchNetwork}\n          />\n        </MobileArrowWrapper>\n        <div className=\"dropdown\">\n        <BridgeCardBody style={{textAlign: \"center\"}} data-bs-toggle=\"dropdown\" aria-expanded=\"false\" onClick={toggleOpenToNetwork}>\n          <Flex alignItems=\"center\" justifyContent=\"center\">\n            <DestinationFlex flexDirection=\"column\" alignItems=\"center\">\n              <NetworkLogo network={bridgeNetworks[toNetwork]} size=\"40px\" />\n              {/* <Text id=\"pair\" className=\"text-grey\">\n                {(otherCurrency && otherCurrency.symbol && otherCurrency.symbol.length > 20\n                  ? `${otherCurrency.symbol.slice(0, 4)}...${otherCurrency.symbol.slice(\n                    otherCurrency.symbol.length - 5,\n                    otherCurrency.symbol.length,\n                  )}`\n                  : otherCurrency?.symbol) || t('Select a currency')}\n              </Text> */}\n              <Text id=\"pair\">\n                {t(`${bridgeNetworks[toNetwork].symbol}`)}\n              </Text>\n            </DestinationFlex>\n            <DestinationText className=\"text-grey\">{shortenAccountAddress}</DestinationText>\n          </Flex>\n        </BridgeCardBody>\n          <ul className={menuClassToNetwork} style={{ width: '100%' }} aria-labelledby=\"dropdownMenuButton3\">\n            {Object.keys(bridgeNetworks).map((key, index) => (\n              <li><NetworkRow\n                style={{ width: \"auto\"}}\n                network={bridgeNetworks[key]}\n                isSelectedNetwork={isSelectedToNetwork(bridgeNetworks[key].name)}\n                onSelect={() => {handleSelectToNetwork(bridgeNetworks[key].name); toggleOpenToNetwork()}}\n                otherSelected={otherSelectedNetworkTo}\n              /></li>\n            ))}\n          </ul>\n        </div>\n      </BridgeCardFlex>\n      {/* <ChangeDestinationFlex mt=\"5px\">\n        <ChangeDestinationButton>{t(\"Change Destination Address\")}</ChangeDestinationButton>\n      </ChangeDestinationFlex> */}\n      <GreyLabel style={{ marginTop: '1rem' }}>{t('Amount')}</GreyLabel>\n      <InputPanel id={id}>\n        <Container hideInput={hideInput}>\n          {!hideInput && (\n            <LabelRow>\n              {account && (\n                <Text onClick={onMax} fontSize=\"18px\" style={{ display: 'inline', cursor: 'pointer' }} />\n              )}\n            </LabelRow>\n          )}\n          <InputRow className=\"custom-zap-row\" style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableCurrencySelect}>\n            {!hideInput && (\n              <>\n                <MNumericalInput\n                  className=\"token-amount-input\"\n                  value={value}\n                  onUserInput={(val) => {\n                    onUserInput(val)\n                  }}\n                  placeholder={t('Enter your amount')}\n                />\n              </>\n            )}\n          </InputRow>\n        </Container>\n      </InputPanel>\n      <TokenInfoFlex>\n        <BalanceText>{!hideBalance && !!currency && selectedCurrencyBalance\n          ? t('You will receive ~ %amount% %symbol%', { amount: (estimatedValue > 0)? estimatedValue : 0 ?? '', symbol: currency.symbol })\n          : t('You will receive ~ %amount% %symbol%', { amount: (estimatedValue > 0)? estimatedValue : 0 ?? '', symbol: currency.symbol })}\n        </BalanceText>\n        <BalanceText>\n          {t(`Your balance: %amount% %symbol%`, { amount: balance ?? '', symbol: currency.symbol })}\n        </BalanceText>\n      </TokenInfoFlex>\n      <TokenInfoFlex>\n        <BalanceText>\n          {t(`Minimum amount: %amount% %symbol%`, { amount: minAmount ?? '', symbol: currency.symbol })}\n        </BalanceText>\n        <BalanceText>\n          {t(`Maximum amount: %amount% %symbol%`, { amount: maxAmount ?? '', symbol: currency.symbol })}\n        </BalanceText>\n      </TokenInfoFlex>\n    </>\n  )\n}\n","import { createAction } from '@reduxjs/toolkit'\n\nexport enum Field {\n  INPUT = 'INPUT',\n  OUTPUT = 'OUTPUT',\n}\n\nexport const selectCurrency = createAction<{ field: Field; currencyId: string }>('swap/selectCurrency')\nexport const switchCurrencies = createAction<void>('swap/switchCurrencies')\nexport const typeInput = createAction<{ field: Field; typedValue: string }>('swap/typeInput')\nexport const replaceSwapState = createAction<{\n  field: Field\n  typedValue: string\n  inputCurrencyId?: string\n  outputCurrencyId?: string\n  recipient: string | null\n}>('swap/replaceSwapState')\nexport const setRecipient = createAction<{ recipient: string | null }>('swap/setRecipient')\n","import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@pancakeswap/sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useENS from 'hooks/ENS/useENS'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport { useUserSlippageTolerance } from '../user/hooks'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n} {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('Connect Wallet')\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('Enter an amount')\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('Select a token')\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t('Enter a recipient')\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? t('Invalid recipient')\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return 'BNB' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: null,\n      }),\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { CmsModal, Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface LearnMoreModalProps {\n  content: string\n  onDismiss?: () => void\n  // TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\nconst MModal = styled(CmsModal)`\n  border: none;\n  max-width: 70vh;\n  max-height: 70vh;\n\n  h2 {\n    color: white;\n  }\n  svg {\n    fill: white;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 500px;\n  }\n`\n\nconst LearnMoreModal: React.FC<LearnMoreModalProps> = ({ content, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n\n  return (\n    <MModal title={t('Learn More')} onDismiss={onDismiss} headerBackground='#910101'>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <div style={{color: 'black'}} dangerouslySetInnerHTML={{ __html: content}} />\n      </Flex>\n    </MModal>\n  )\n}\n\nexport default LearnMoreModal\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useCakeVaultContract, useJackpotContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nexport const useSendToken = (tokenContract: Contract, decimals: number) => {\n  const handleSendToken = useCallback(async (toAddress: string, amount: string) => {\n    try {\n      // const tx = await tokenContract.approve(jackpotContract.address, ethers.constants.MaxUint256)\n      // console.log(`toAddress: ${toAddress}, amount: ${new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()}`)\n      // console.log(tokenContract)\n      const tx = await tokenContract.transfer(toAddress, new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n      // console.log(tx)\n      const receipt = await tx.wait()\n      return receipt\n\n      // const calls = nonBnbPots.map((p) => ({\n      //   address: getAddress(p.stakingToken.address),\n      //   name: 'balanceOf',\n      //   params: [account],\n      // }))\n      // const tokenBalancesRaw = await multicall(erc20ABI, calls)\n    } catch (e) {\n      // console.log(e)\n      return false\n    }\n  }, [decimals, tokenContract])\n\n  return { onSendToken: handleSendToken }\n}","import React, { useMemo, useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport { CmsModal, Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport useRefresh from 'hooks/useRefresh'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport bridgeNetworks from 'config/constants/bridgeNetworks'\nimport { useSendEth } from 'hooks/useEthTokenBalance'\nimport { useSendToken } from '../hooks/useSendToken'\nimport { useBridgeGetSwaps } from '../hooks/useBridgeGetSwaps'\n\ninterface ConfirmModalProps {\n  id: string\n  depositAddress: string\n  amount: number\n  symbol: string\n  fromNetwork: string\n  onDismiss?: () => void\n  onInActionLockButtonChange: (inAction: boolean, lockButton: boolean) => void\n  // TooltipComponent: React.ElementType\n  fromContract: ethers.Contract\n  decimals: number\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\nconst MModal = styled(CmsModal)`\n  border: none;\n  max-width: 70vh;\n  max-height: 70vh;\n\n  h2 {\n    color: white;\n  }\n  svg {\n    fill: white;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 500px;\n  }\n`\nconst DepositAddressText = styled(Text)`\n  font-size: 13px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 16px;\n  }\n`\n\nconst ConfirmModal: React.FC<ConfirmModalProps> = ({ id, depositAddress, amount, symbol, fromNetwork, onDismiss, onInActionLockButtonChange, fromContract, decimals }) => {\n  // console.log(`id: ${id}, depositAddress: ${depositAddress}, amount: ${amount}, symbol: ${symbol}, decimals: ${decimals}`)\n  const { t } = useTranslation()\n  const { account, chainId } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n  const { theme } = useTheme()\n  const { fastRefresh } = useRefresh()\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const [swapData, setSwapData] = useState({})\n  const [changeNetworkNeed, setChangeNetworkNeed] = useState(false)\n\n  const { onSendToken: handleSendToken } = useSendToken(fromContract, decimals)\n  const { onBridgeGetSwaps: handleBridgeGetSwaps } = useBridgeGetSwaps(id)\n  const { onSendEth: handleSendEth } = useSendEth(depositAddress, amount.toString())\n\n  const handleInActionLockButtonChange = (newInAction, newLockButton) => onInActionLockButtonChange(newInAction, newLockButton)\n\n  useEffect(() => {\n    const getSwapInfo = async () => {\n      const result = await handleBridgeGetSwaps()\n      // console.log(result)\n      if (result) {\n        setSwapData(result)\n      }\n    }\n    getSwapInfo()\n  }, [handleBridgeGetSwaps, fastRefresh])\n\n  // detect if need to change network\n  if (fromNetwork === 'ethereum' && chainId !== +process.env.REACT_APP_ETH_CHAIN_ID) {\n    if (changeNetworkNeed === false) {\n      setChangeNetworkNeed(true)\n    }\n  } else if (fromNetwork === 'bsc' && chainId !== +process.env.REACT_APP_CHAIN_ID) {\n    if (changeNetworkNeed === false) {\n      setChangeNetworkNeed(true)\n    }\n  } else if (changeNetworkNeed === true) {\n      setChangeNetworkNeed(false)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n    try {\n      // const tx = await cakeVaultContract.harvest({ gasLimit: 300000 })\n      // const receipt = await tx.wait()\n      if (symbol !== 'ETH' || (fromNetwork === 'bsc' && symbol === 'ETH')) {\n        const receipt = await handleSendToken(depositAddress, amount.toString())\n        // console.log(\"TOKEN RECEIPT:\")\n        // console.log(receipt)\n        // const receipt = {\"status\": true}\n        if (receipt.status) {\n          toastSuccess(t('Transaction Completed'), t('Token transaction is successfully deposit into bridge address and awaiting cross chain network confirmation.'))\n          setPendingTx(false)\n          handleInActionLockButtonChange(false, false)\n          onDismiss()\n        } else {\n          toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n          handleInActionLockButtonChange(false, false)\n          setPendingTx(false)\n          onDismiss()\n        }\n      } else {\n        // console.log(\"ETH send called\")\n        const receipt: any = await handleSendEth()\n        // console.log(\"TOKEN RECEIPT:\")\n        // console.log(receipt)\n        if (receipt.status) {\n          toastSuccess(t('Transaction Completed'), t('Token transaction is successfully deposit into bridge address and awaiting cross chain network confirmation.'))\n          setPendingTx(false)\n          handleInActionLockButtonChange(false, false)\n          onDismiss()\n        } else {\n          toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n          handleInActionLockButtonChange(false, false)\n          setPendingTx(false)\n          onDismiss()\n        }\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      handleInActionLockButtonChange(false, false)\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <MModal title={t('Confirmation')} onDismiss={onDismiss} headerBackground='#910101'>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" flexDirection=\"column\">\n        <Text>{t('Bridge Deposit address')}</Text>\n        <DepositAddressText>{depositAddress}</DepositAddressText>\n      </Flex>\n      <Divider />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text fontSize=\"14px\">\n          {t('Amount')}\n        </Text>\n        {/* <Balance value={amount} unit=\" CAKE\" /> */}\n        <Text>{amount} {symbol}</Text>\n      </Flex>\n      <Text fontSize=\"13px\">{t('The cross chain transfer may takes longer than expected due to two different network transfer')}</Text>\n      {account ? (\n        <Button\n          isLoading={pendingTx}\n          // disabled={!dollarBountyToDisplay || !cakeBountyToDisplay || !callFee}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          onClick={handleConfirmClick}\n          disabled={changeNetworkNeed}\n          // mb=\"28px\"\n          mt=\"1rem\"\n          id=\"confirmBridge\"\n        >\n          {changeNetworkNeed === false? pendingTx ? t('Confirming') : t('Confirm') : t('Switch to %network% network', {network: bridgeNetworks[fromNetwork].bridgeLabel})}\n        </Button>\n      ) : (\n        <ConnectWalletButton mb=\"28px\" />\n      )}\n    </MModal>\n  )\n}\n\nexport default ConfirmModal\n","import { useCallback } from 'react'\nimport axios from \"axios\"\n\nexport const useBridgeGetSwaps = (_id: string) => {\n  const handleBridgeGetSwaps = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_BRIDGE_LINK}/api/v2/swaps/${_id}`\n\n      const response = await axios.get(baseUrl)\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_id])\n\n  return { onBridgeGetSwaps: handleBridgeGetSwaps }\n}","import React, { useState, useCallback, useEffect, useRef } from 'react'\nimport { isBrowser, isMobile } from 'react-device-detect'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport {InjectedConnector} from \"@web3-react/injected-connector\";\nimport { useTranslation } from 'contexts/Localization'\nimport { Currency, CurrencyAmount, JSBI, Token, Trade } from '@pancakeswap/sdk'\nimport { Button as tempButton, Text, ArrowForwardIcon, Box, Flex, useModal, AutoRenewIcon, connectorLocalStorageKey, ConnectorNames, MetamaskIcon } from '@pancakeswap/uikit'\nimport { useCurrency } from 'hooks/Tokens'\nimport { getContract } from 'utils'\nimport { setupNetwork, setupEthNetwork } from 'utils/wallet'\nimport { connectorsByNameBridge } from 'utils/web3React'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { useGetBnbBalanceEth } from 'hooks/useEthTokenBalance'\nimport { useERC20, useERC20Bridge } from 'hooks/useContract'\nimport bep20Abi from 'config/abi/erc20.json'\nimport tokens from 'config/constants/tokens'\nimport bridgeTokens from 'config/constants/bridgeTokens'\nimport bridgeNetworks from 'config/constants/bridgeNetworks'\nimport { getAddress, getAddressEth } from 'utils/addressHelpers'\nimport useToast from \"hooks/useToast\"\nimport { getFullDisplayBalanceFull } from 'utils/formatBalance'\nimport Page from '../Page'\nimport { AppBody } from '../../components/App'\nimport { ArrowWrapper, SwapCallbackError, Wrapper } from './components/styleds'\nimport Column, { AutoColumn } from '../../components/Layout/Column'\nimport BridgeInputPanel from '../../components/BridgeInputPanel'\nimport { AutoRow, RowBetween } from '../../components/Layout/Row'\nimport { Field } from '../../state/bridge/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from '../../state/bridge/hooks'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\nimport useActiveWeb3React, { useEthActiveWeb3React } from '../../hooks/useActiveWeb3React'\nimport CircleLoader from '../../components/Loader/CircleLoader'\nimport ProgressSteps from './components/ProgressSteps'\nimport LearnMoreModal from \"./components/LearnMoreModal\"\nimport ConfirmModal from \"./components/ConfirmModal\"\nimport { useCmsContent } from \"./hooks/useCmsContent\"\nimport { useBridgeSwaps } from './hooks/useBridgeSwaps'\nimport { useBridgeTokens } from './hooks/useBridgeTokens'\nimport { useBridgeGetNetworkInfo } from './hooks/useBridgeGetNetworkInfo'\nimport { useSendToken } from './hooks/useSendToken'\n\nconst injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 56, 128],\n});\n\nconst BridgeWrapper = styled.div`\n  background-color: #910101;\n  padding-bottom: 60px;\n`\nconst BridgeOuterWrapper = styled.div`\n  width: 95%;\n  margin: auto;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 100%\n  }\n`\nconst Button = styled(tempButton)`\n  left: 33.68%;\n  right: 33.61%;\n  top: 83.24%;\n  bottom: 10.46%;\n  background: #910101;\n  border-radius: 5px;\n`\nconst LearnMoreText = styled(Text)`\n  color: #910101;\n  font-size: 14px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 14px;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`\ntype cmsBaseObj = {\n  content: string,\n  language: string,\n  page: string,\n  key: string\n}\ntype cmsObj = {\n  banner?: cmsBaseObj,\n  bridge?: cmsBaseObj\n}\n\ntype swapDataObj = {\n  id: string,\n  status: string,\n  createTime: string,\n  walletAddress: string,\n  walletNetwork: string,\n  symbol: string,\n  amount: number,\n  fromNetwork: string,\n  toNetwork: string,\n  toAddress: string,\n  networkFeePromoted: boolean,\n  networkFee: number,\n  swapFeeRate: number,\n  swapFee: number,\n  depositAddress: string,\n  depositAddressLabel: string,\n  depositAddressLabelName: string,\n  depositTimeout: string\n}\n\nconst Banner = () => {\n  return (\n    <>\n      <div className='banner-wrapper-area hide-ifMobile'>\n        <div className='container'>\n          <div className='row align-items-center m-0'>\n            <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-content'>\n                <h3>THE SAFE, FAST AND MOST SECURE WAY TO BRING ETHEREUM ASSETS TO BINANCE SMART CHAIN (BSC)</h3>\n              </div>\n            </div>\n            <div className='col-xl-4 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-image'>\n                <img src='/images/decor-img.png' alt='banner' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Bridge: React.FC = () => {\n  const { t, currentLanguage } = useTranslation()\n  const { account, chainId, library, activate } = useActiveWeb3React()\n  const { library: ethLibrary, activate: activateEth } = useEthActiveWeb3React()\n  const bridgeIsUnsupported = false\n\n  const { toastSuccess, toastError } = useToast()\n\n  // console.log(useActiveWeb3React())\n  // console.log(useEthActiveWeb3React())\n\n  const initialSwapData: swapDataObj = {\n    id: \"\",\n    status: \"\",\n    createTime: \"\",\n    walletAddress: \"\",\n    walletNetwork: \"\",\n    symbol: \"\",\n    amount: 0,\n    fromNetwork: \"\",\n    toNetwork: \"\",\n    toAddress: \"\",\n    networkFeePromoted: false,\n    networkFee: 0,\n    swapFeeRate: 0,\n    swapFee: 0,\n    depositAddress: \"\",\n    depositAddressLabel: \"\",\n    depositAddressLabelName: \"\",\n    depositTimeout: \"\"\n  }\n\n  const isClickConfirmRef = useRef(false)\n  const isOpenedRef = useRef(false)\n  const [changeNetworkNeed, setChangeNetworkNeed] = useState(false)\n  const [amount, setAmount] = useState(\"\")\n  const [balance, setBalance] = useState(\"\")\n  const [contractDecimal, setContractDecimal] = useState(0)\n  const [swapData, setSwapData] = useState(initialSwapData)\n  const swapDataRef = useRef(swapData)\n\n  // learn more\n  const { onCmsContent: handleCmsContent } = useCmsContent(\"bridge\", currentLanguage.locale)\n  const [cmsContent, setCmsContent] = useState(() => {\n    const init: cmsObj = {\n      bridge: {\n        content: \"\",\n        language: \"\",\n        page: \"\",\n        key: \"\"\n      }\n    }\n    return init\n  })\n\n  useEffect(() => {\n    const getCms = async() => {\n      const result = await handleCmsContent()\n      if (Object.keys(result).length > 0) {\n        setCmsContent(result)\n      }\n    }\n    getCms()\n  }, [handleCmsContent])\n\n  const [onLearnMore] = useModal(<LearnMoreModal content={cmsContent.bridge.content} />)\n\n  // check whether the user has approved the router on the input token\n  const [approval, setApproval] = useState('approved')\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === 'pending') {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\n\n  const trade = v2Trade\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n  }\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  // const isValid = !swapInputError\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      // onUserInput(Field.INPUT, value)\n      setAmount(value)\n    },\n    [],\n  )\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n      // const showSwapWarning = shouldShowSwapWarning(inputCurrency)\n      // if (showSwapWarning) {\n      //   setSwapWarningCurrency(inputCurrency)\n      // } else {\n      //   setSwapWarningCurrency(null)\n      // }\n    },\n    [onCurrencySelection],\n  )\n\n  const currencyList: Currency[] = [useCurrency(getAddress(bridgeTokens.eth.address)), useCurrency(getAddress(bridgeTokens.usdt.address))]  // to be declare separately by json\n  const [selectedCurrency, setSelectedCurrency] = useState(currencyList[0])\n  const handleSelectedCurrencyChange = (newSelectedCurrency: Currency) => {\n    setSelectedCurrency(newSelectedCurrency)\n    // console.log(newSelectedCurrency)\n  }\n  const selectedToken = (bridgeTokens[selectedCurrency.symbol.toLowerCase()])\n\n  const [selectedFromNetwork, setSelectedFromNetwork] = useState(\"bsc\")\n  const selectedFromNetworkRef = useRef(selectedFromNetwork)\n  const [selectedToNetwork, setSelectedToNetwork] = useState(\"ethereum\")\n  const selectedToNetworkRef = useRef(selectedToNetwork)\n  const handleSelectedFromChange = (newSelectedFrom: string) => {\n    const previousSelectedNetwork = selectedFromNetwork\n    setSelectedFromNetwork(newSelectedFrom)\n    selectedFromNetworkRef.current = newSelectedFrom\n    // console.log(`newSelectedFrom: ${newSelectedFrom}`)\n    setSelectedToNetwork(previousSelectedNetwork)\n    selectedToNetworkRef.current = previousSelectedNetwork\n  }\n  const handleSelectedToChange = (newSelectedTo: string) => {\n    const previousSelectedNetwork = selectedToNetwork\n    setSelectedToNetwork(newSelectedTo)\n    selectedToNetworkRef.current = newSelectedTo\n    // console.log(`newSelectedTo: ${newSelectedTo}`)\n    setSelectedFromNetwork(previousSelectedNetwork)\n    selectedFromNetworkRef.current = previousSelectedNetwork\n  }\n\n  const handleSwitchNetwork = () => {\n    setSelectedFromNetwork(selectedToNetworkRef.current)\n    setSelectedToNetwork(selectedFromNetworkRef.current)\n    const lastSelectedFromNetworkRef = selectedFromNetworkRef.current\n    selectedFromNetworkRef.current = selectedToNetworkRef.current\n    selectedToNetworkRef.current = lastSelectedFromNetworkRef\n  }\n\n  useEffect(() => {\n    const switchN = async () => {\n      const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n      if (selectedFromNetwork === 'ethereum' && chainId !== +process.env.REACT_APP_ETH_CHAIN_ID) {\n        const hasSetup = await setupEthNetwork()\n        if (hasSetup) {\n          activate(connectorsByNameBridge[connectorId])\n        }\n      } else if (selectedFromNetwork === 'bsc' && chainId !== +process.env.REACT_APP_CHAIN_ID) {\n        const hasSetup = await setupNetwork()\n        if (hasSetup) {\n          activate(connectorsByNameBridge[connectorId])\n        }\n      }\n    }\n    switchN()\n  }, [activate, chainId, selectedFromNetwork])\n\n  // detect if need to change network\n  if (selectedFromNetwork === 'ethereum' && chainId !== +process.env.REACT_APP_ETH_CHAIN_ID) {\n    if (changeNetworkNeed === false) {\n      setChangeNetworkNeed(true)\n    }\n  } else if (selectedFromNetwork === 'bsc' && chainId !== +process.env.REACT_APP_CHAIN_ID) {\n    if (changeNetworkNeed === false) {\n      setChangeNetworkNeed(true)\n    }\n  } else if (changeNetworkNeed === true) {\n      setChangeNetworkNeed(false)\n  }\n\n  // selectedFromNetworkRef.current === 'ethereum'? getAddressEth(selectedToken.address)\n  // const erc20Contract = getContract(getAddressEth(selectedToken.address), bep20Abi, ethLibrary,  (account) || undefined)\n  const changedWalletErc20Contract = useERC20Bridge((selectedToken.address)? getAddressEth(selectedToken.address) : '')\n\n  // const fromContract = selectedFromNetworkRef.current === 'ethereum'? \n  //   getContract(getAddressEth(selectedToken.address), bep20Abi, ethLibrary,  (account) || undefined) : getContract(getAddress(selectedToken.address), bep20Abi, library,  (account) || undefined)\n\n  // const { balance: bnbBalance } = useGetBnbBalance()\n  // console.log(`bnbBalance: ${bnbBalance.toString()}`)\n\n  const { balance: ethBalance } = useGetBnbBalanceEth()\n  // console.log(`ethBalance: ${ethBalance.toString()}`)\n\n  const fromContract = selectedFromNetworkRef.current === 'ethereum'? \n    changedWalletErc20Contract || undefined : getContract(getAddress(selectedToken.address), bep20Abi, library,  (account) || undefined)\n\n  useEffect(() => {\n    // console.log(\"trigger useeffect\")\n    const getBalance = async () =>{\n      if (fromContract) {\n        const res = await fromContract.balanceOf(account)\n        // console.log(\"fromContract balance:\")\n        // console.log(res)\n        const decimalRes = await fromContract.decimals()\n        // console.log(\"fromContract decimal:\")\n        // console.log(decimalRes)\n        setContractDecimal(decimalRes)\n        const formattedBalance = getFullDisplayBalanceFull(new BigNumber(res.toString()), decimalRes, 4)\n        setBalance(formattedBalance)\n      } else if(selectedToken.symbol === 'ETH') {\n        const formattedBalance = getFullDisplayBalanceFull(ethBalance, 18, 4)\n        setBalance(formattedBalance)\n      }\n    }\n    if (changeNetworkNeed === false) {\n      getBalance()\n    } else {\n      // console.log(`CHANGE NETWORK`)\n      setBalance(\"\")\n    }\n  }, [account, changeNetworkNeed, ethBalance, fromContract, selectedToken])\n\n  const [inAction, setInAction] = useState(false)\n  const [lockButton, setLockButton] = useState(false)\n  const handleInActionLockButtonChange = (newInAction: boolean, newLockButton: boolean) => {\n    setInAction(newInAction)\n    setLockButton(newLockButton)\n    setAmount(\"\")\n  }\n  // const handleClosedModal = () => {\n  //   console.log('trigger handle close')\n  //   setInAction(false)\n  //   setLockButton(false)\n  // }\n\n  const [onConfirm] = useModal(<ConfirmModal id={swapDataRef.current.id} depositAddress={swapDataRef.current.depositAddress} amount={swapDataRef.current.amount} symbol={swapDataRef.current.symbol} fromNetwork={selectedFromNetwork} fromContract={fromContract} decimals={contractDecimal} onInActionLockButtonChange={handleInActionLockButtonChange} />, false)\n\n  const { onBridgeSwaps: handleBridgeSwaps } = useBridgeSwaps(account, selectedToken.symbol, bridgeNetworks[selectedFromNetwork].bridgeLabel, new BigNumber(amount).toNumber(), account, bridgeNetworks[selectedToNetwork].bridgeLabel, bridgeNetworks[selectedFromNetwork].bridgeLabel)\n  const { onBridgeGetTokens: handleBridgeGetTokens } = useBridgeTokens(selectedToken.symbol)\n  const { onBridgeGetNetworkInfo: handleBridgeGetNetworkInfo } = useBridgeGetNetworkInfo(selectedToken.symbol)\n  const { onSendToken: handleSendToken } = useSendToken(fromContract, selectedToken.decimals)\n\n  const [tokenInfo, setTokenInfo] = useState(\n    {\n      bcSymbol: \"\",\n      bscContractAddress: \"\",\n      bscContractDecimal: 18,\n      bscGasExchangeEnabled: true,\n      bscGasExchangeNetworkFee: 0,\n      bscSymbol: \"\",\n      enabled: false,\n      ethContractAddress: \"\",\n      ethContractDecimal: 18,\n      ethSymbol: \"\",\n      icon: \"\",\n      maxAmount: 0,\n      minAmount: 0,\n      name: \"\",\n      promotion: true,\n      symbol: \"\"\n    }\n  )\n  const [networkInfo, setNetworkInfo] = useState({\n    \"name\": \"\",\n    \"symbol\": \"\",\n    \"swapFeeRate\": 0,\n    \"networkFee\": 0,\n    \"supportLabel\": false,\n    \"labelName\": \"\",\n    \"labelRegex\": \"\",\n    \"txUrl\": \"\",\n    \"depositEnabled\": true,\n    \"withdrawEnabled\": true,\n    \"withdrawAmountUnit\": 0,\n    \"withdrawMinAmount\": 0,\n    \"withdrawMaxAmount\": 0,\n    \"addressRegex\": \"\",\n    \"tokenStandard\": \"\",\n    \"requiredConfirms\": 0\n  })\n\n  useEffect(() => {\n    const getTokenInfo = async() => {\n      const result = await handleBridgeGetTokens()\n      // console.log(result)\n      // const filteredArr = result.tokens.filter((token) => { return token.symbol === selectedToken.symbol })\n      const selectedTokenInfo = result.tokens.find((token) => token.symbol === selectedToken.symbol)\n      // console.log(selectedTokenInfo)\n      setTokenInfo(selectedTokenInfo)\n    }\n    const getNetworkInfo = async () => {\n      const result = await handleBridgeGetNetworkInfo()\n      const selectedNetworkInfo = result.networks.find((network) => (network.symbol === selectedToken.symbol && network.name === bridgeNetworks[selectedToNetwork].bridgeLabel))\n      setNetworkInfo(selectedNetworkInfo)\n    }\n    getTokenInfo()\n    getNetworkInfo()\n  }, [handleBridgeGetNetworkInfo, handleBridgeGetTokens, selectedToNetwork, selectedToken])\n\n  // useEffect(() => {\n  //   const getSwapInfo = async() => {\n  //     const result = await handleBridgeGetSwaps()\n  //     console.log('run handleBridgeGetSwaps')\n  //     console.log(result)\n  //     if (result) {\n  //       setSwapData(result)\n  //       swapDataRef.current = result\n  //     }\n  //   }\n  //   if (swapDataRef.current.id){\n  //     console.log(`swapDataRef.current.id: ${swapDataRef.current.id}`)\n  //     getSwapInfo()\n  //   }\n  // }, [handleBridgeGetSwaps])\n\n  if (changeNetworkNeed === true) {\n    if (lockButton === false) {\n      setLockButton(true)\n    }\n  } else\n  if (inAction === false && new BigNumber(amount).isNaN()) {\n    if (lockButton === false) {\n      setLockButton(true)\n    }\n  } else if (inAction === false && new BigNumber(amount).isLessThan(tokenInfo.minAmount)) {\n    if (lockButton === false) {\n      setLockButton(true)\n    }\n  } else if (inAction === false && lockButton === true && changeNetworkNeed === false) {\n    setLockButton(false)\n  }\n\n  if (isClickConfirmRef.current === true && swapData.id !== \"\" && swapDataRef.current.id !== \"\" && isOpenedRef.current === false) {\n    // console.log(`trigger onConfirm, swapData id: ${swapData.id}, ref: ${swapDataRef.current.id}`)\n    onConfirm()\n    // isOpenedRef.current = true\n    isClickConfirmRef.current = false\n    setSwapData(initialSwapData)\n    swapDataRef.current = initialSwapData\n  }\n\n  const onClickConfirm = async () => {\n    const setToast = (status: boolean) => {\n      if (status) {\n        toastSuccess(\n          t(`Deposit Success`),\n          t(`Deposited successfully`),\n        )\n      } else {\n        toastError(\n          t(`Deposit Failed`),\n          t(`Deposit failed, please try again`)\n        )\n      }\n    }\n    setInAction(true)\n    setLockButton(true)\n    isClickConfirmRef.current = true\n    try {\n        const status = await handleBridgeSwaps()\n        // console.log(`_address: ${account}, _symbol: ${selectedToken.symbol}, _fromNetwork: ${bridgeNetworks[selectedFromNetwork].bridgeLabel}, _amount: ${new BigNumber(amount).toNumber()}, _toAddress: ${account}, _toNetwork: ${bridgeNetworks[selectedToNetwork].bridgeLabel}, _walletNetwork: ${bridgeNetworks[selectedFromNetwork].bridgeLabel}`)\n        // const status = {\n        //   \"id\": \"03a3825132b4451d91693dc7277945b9\",\n        //   \"createTime\": \"2021-10-01T03:50:28.000+00:00\",\n        //   \"walletNetwork\": \"ETH\",\n        //   \"walletAddress\": \"0x90be131aEdAd0f2a0C30bf8A1DAc3D5e2164C6af\",\n        //   \"symbol\": \"USDT\",\n        //   \"amount\": 130,\n        //   \"fromNetwork\": \"ETH\",\n        //   \"toNetwork\": \"BSC\",\n        //   \"toAddress\": \"0x90be131aEdAd0f2a0C30bf8A1DAc3D5e2164C6af\",\n        //   \"networkFeePromoted\": true,\n        //   \"networkFee\": 0.8,\n        //   \"swapFeeRate\": 0,\n        //   \"swapFee\": 0,\n        //   \"depositAddress\": \"0xf770ca7d43878a99f77ac01870789d020c9bf3b9\",\n        //   \"depositAddressLabel\": \"\",\n        //   \"depositAddressLabelName\": \"\",\n        //   \"depositTimeout\": \"2021-10-01T05:50:29.000+00:00\",\n        //   \"status\": \"WaitingForDeposit\",\n        // }\n        // console.log(status)\n        if (status) {\n          setSwapData(status)\n          swapDataRef.current = status\n          // console.log(swapDataRef.current)\n          // prompt modal\n          // onConfirm()\n        } else {\n          toastError(\n            t(`Swap Failed`),\n            t(`Swap failed, please try again`)\n          )\n          setInAction(false)\n          setLockButton(false)\n        }\n    } catch (e) {\n      toastError(\n        t(`Transaction Rejected`),\n        t(`Please try again`)\n      )\n      setInAction(false)\n      setLockButton(false)\n    }\n    // setInAction(false)\n    // setLockButton(false)\n  }\n\n  return (\n    <>\n      <Banner />\n      <BridgeWrapper>\n        <h1 className=\"page-red-header hide-ifMobile\">{t(\"BRIDGE\")}</h1>\n        <Flex justifyContent=\"center\" marginBottom=\"1rem\">\n          <Text color=\"#FFFFFF\" fontSize=\"14px\">\n            {t('Best support for Metamask')}\n          </Text>\n          <MetamaskIcon ml=\"4px\" />\n        </Flex>\n        {/* remove padding top when openback subnav */}\n        <div className=\"bridge-container\">\n          {/* <SubNav /> */}\n          <BridgeOuterWrapper>\n          <AppBody>\n            <Wrapper >\n              <AutoColumn>\n                <BridgeInputPanel\n                  label={t('Assets')}\n                  value={amount}\n                  estimatedValue={+amount - networkInfo.networkFee}\n                  balance={balance}\n                  minAmount={tokenInfo.minAmount}\n                  maxAmount={tokenInfo.maxAmount}\n                  showMaxButton={!atMaxAmountInput}\n                  currency={selectedCurrency}\n                  // currency={currencies[Field.INPUT]}\n                  onUserInput={handleTypeInput}\n                  onMax={handleMaxInput}\n                  onCurrencySelect={handleSelectedCurrencyChange}\n                  onFromSelect={handleSelectedFromChange}\n                  fromNetwork={selectedFromNetwork}\n                  onToSelect={handleSelectedToChange}\n                  toNetwork={selectedToNetwork}\n                  otherCurrency={useCurrency('BNB')}\n                  // otherCurrency={currencies[Field.OUTPUT]}\n                  id=\"swap-currency-input\"\n                  onSwitchNetwork={handleSwitchNetwork}\n                />\n                {/* <div style={{textAlign: 'center'}}>\n                  <img style={{margin: '2rem 0', maxWidth: '75%'}} src=\"images/coming-soon-stamp.png\" alt=\"coming-soon\" />\n                </div> */}\n              </AutoColumn>\n              <Box mt=\"1rem\" className=\"text-center\">\n                {bridgeIsUnsupported ? (\n                  <Button width=\"100%\" disabled mb=\"4px\">\n                    {t('Unsupported Asset')}\n                  </Button>\n                ) : !account ? (\n                  <ConnectWalletButton width=\"37%\" style={{whiteSpace: 'nowrap'}} />\n                ) : (\n                  <Button\n                    variant={lockButton ? 'danger' : 'primary'}\n                    id=\"swap-button\"\n                    width=\"60%\"\n                    disabled={lockButton}\n                    onClick={onClickConfirm}\n                    endIcon={inAction ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n                  >\n                    {changeNetworkNeed === false? t('Confirm') : (isBrowser)? t(`Switch to %network% network`, {network: bridgeNetworks[selectedFromNetwork].bridgeLabel}) : t(`Please switch to %network% network manually`, {network: bridgeNetworks[selectedFromNetwork].bridgeLabel})}\n                  </Button>\n                )}\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  <LearnMoreText color=\"textSubtle\" mt=\"6px\" style={{textDecoration: \"underline\"}} onClick={onLearnMore}>\n                    {t('Learn more')}\n                  </LearnMoreText>\n                </Flex>\n              </Box>\n            </Wrapper>\n          </AppBody>\n          </BridgeOuterWrapper>\n        </div>\n      </BridgeWrapper>\n    </>\n  )\n}\n\nexport default Bridge\n","import { useCallback, useEffect, useState } from 'react'\nimport axios from \"axios\"\n\nexport const useCmsContent = (_page: string, _locale: string) => {\n  const handleCmsContent = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/frontend/get-content`\n\n      const response = await axios.get(baseUrl, {\n        params: {\n          page    : _page,\n          language: _locale\n        }\n      })\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_locale, _page])\n\n  return { onCmsContent: handleCmsContent }\n}","import { useCallback } from 'react'\nimport axios from \"axios\"\n\nexport const useBridgeSwaps = (_address: string, _symbol: string, _fromNetwork: string, _amount: number, _toAddress: string, _toNetwork: string, _walletNetwork: string) => {\n  const handleBridgeSwaps = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_BRIDGE_LINK}/api/v2/swaps`\n\n      // console.log(`_address: ${_address}, _symbol: ${_symbol}, _fromNetwork: ${_fromNetwork}, _amount: ${_amount}, _toAddress: ${_toAddress}, _toNetwork: ${_toNetwork}, _walletNetwork: ${_walletNetwork}`)\n      const response = await axios.post(baseUrl, {\n        walletAddress: _address,\n        symbol: _symbol,\n        fromNetwork: _fromNetwork,\n        amount: _amount,\n        toAddress: _toAddress,\n        toNetwork: _toNetwork,\n        walletNetwork: _walletNetwork\n      })\n\n      // console.log(response)\n      const { data } = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_address, _amount, _fromNetwork, _symbol, _toAddress, _toNetwork, _walletNetwork])\n\n  return { onBridgeSwaps: handleBridgeSwaps }\n}\n","import { useCallback } from 'react'\nimport axios from \"axios\"\n\nexport const useBridgeGetNetworkInfo = (_id: string) => {\n  const handleBridgeGetNetworkInfo = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_BRIDGE_LINK}/api/v2/tokens/${_id}/networks`\n\n      const response = await axios.get(baseUrl)\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_id])\n\n  return { onBridgeGetNetworkInfo: handleBridgeGetNetworkInfo }\n}","import { useCallback } from 'react'\nimport axios from \"axios\"\n\nexport const useBridgeTokens = (_currency: string) => {\n  const handleBridgeGetTokens = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_BRIDGE_LINK}/api/v2/tokens`\n\n      const response = await axios.get(baseUrl)\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [])\n\n  return { onBridgeGetTokens: handleBridgeGetTokens }\n}","import { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@pancakeswap/sdk'\nimport {\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n} from '../config/constants'\n\nimport { Field } from '../state/swap/actions'\nimport { basisPointsToPercent } from './index'\n\nconst BASE_FEE = new Percent(JSBI.BigInt(25), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade?: Trade | null): {\n  priceImpactWithoutFee: Percent | undefined\n  realizedLPFee: CurrencyAmount | undefined | null\n} {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT,\n        ),\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    (trade.inputAmount instanceof TokenAmount\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade | undefined,\n  allowedSlippage: number,\n): { [field in Field]?: CurrencyAmount } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n","import { Trade, Percent, currencyEquals } from '@pancakeswap/sdk'\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index'\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(\n  tradeA: Trade | undefined | null,\n  tradeB: Trade | undefined | null,\n  minimumDelta: Percent = ZERO_PERCENT,\n): boolean | undefined {\n  if (tradeA && !tradeB) return false\n  if (tradeB && !tradeA) return true\n  if (!tradeA || !tradeB) return undefined\n\n  if (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\n  ) {\n    throw new Error('Trades are not comparable')\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\n  }\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\n}\n\nexport default isTradeBetter\n","/* eslint-disable no-param-reassign */\nimport { isTradeBetter } from 'utils/trades'\nimport { Currency, CurrencyAmount, Pair, Token, Trade } from '@pancakeswap/sdk'\nimport flatMap from 'lodash/flatMap'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\n\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport {\n  BASES_TO_CHECK_TRADES_AGAINST,\n  CUSTOM_BASES,\n  BETTER_TRADE_LESS_HOPS_THRESHOLD,\n  ADDITIONAL_BASES,\n} from '../config/constants'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useUnsupportedTokens } from './Tokens'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const bases: Token[] = useMemo(() => {\n    if (!chainId) return []\n\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\n\n    return [...common, ...additionalA, ...additionalB]\n  }, [chainId, tokenA, tokenB])\n\n  const basePairs: [Token, Token][] = useMemo(\n    () => flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])),\n    [bases],\n  )\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA_, tokenB_]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n\n              const customBasesA: Token[] | undefined = customBases?.[tokenA_.address]\n              const customBasesB: Token[] | undefined = customBases?.[tokenB_.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find((base) => tokenB_.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => tokenA_.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId],\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {}),\n      ),\n    [allPairs],\n  )\n}\n\nconst MAX_HOPS = 3\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade: Trade | null =\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade =\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n    return null\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly])\n}\n\nexport function useIsTransactionUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n  const { chainId } = useActiveWeb3React()\n\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n  // if unsupported list loaded & either token on list, mark as unsupported\n  if (unsupportedTokens) {\n    if (tokenIn && Object.keys(unsupportedTokens).includes(tokenIn.address)) {\n      return true\n    }\n    if (tokenOut && Object.keys(unsupportedTokens).includes(tokenOut.address)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { parse, ParsedQs } from 'qs'\nimport { useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport default function useParsedQueryString(): ParsedQs {\n  const { search } = useLocation()\n  return useMemo(\n    () => (search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}),\n    [search],\n  )\n}\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\nimport { MIN_BNB } from '../config/constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\n    }\n    return CurrencyAmount.ether(JSBI.BigInt(0))\n  }\n  return currencyAmount\n}\n\nexport default maxAmountSpend\n","import { isAddress } from '../../utils'\nimport useENSAddress from './useENSAddress'\nimport useENSName from './useENSName'\n\n/**\n * Given a name or address, does a lookup to resolve to an address and name\n * @param nameOrAddress ENS name or address\n */\nexport default function useENS(nameOrAddress?: string | null): {\n  loading: boolean\n  address: string | null\n  name: string | null\n} {\n  const validated = isAddress(nameOrAddress)\n  const reverseLookup = useENSName(validated || undefined)\n  const lookup = useENSAddress(nameOrAddress)\n\n  return {\n    loading: reverseLookup.loading || lookup.loading,\n    address: validated || lookup.address,\n    name: reverseLookup.ENSName ? reverseLookup.ENSName : !validated && lookup.address ? nameOrAddress || null : null,\n  }\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport { isAddress } from '../../utils'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\nimport useDebounce from '../useDebounce'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false,\n  )\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n  const changed = debouncedAddress !== address\n  return {\n    ENSName: changed ? null : name.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || name.loading,\n  }\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\nimport useDebounce from '../useDebounce'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined]\n    try {\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false,\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return {\n    address: changed ? null : addr.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || addr.loading,\n  }\n}\n"],"sourceRoot":""}