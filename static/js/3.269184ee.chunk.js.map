{"version":3,"sources":["components/Loader/Dots.tsx","utils/currencyId.ts","hooks/useTotalSupply.ts","components/PositionCard/index.tsx","views/Page.tsx","utils/prices.ts","utils/trades.ts","hooks/Trades.ts","hooks/useParsedQueryString.ts","hooks/ENS/useENS.ts","hooks/ENS/useENSName.ts","hooks/ENS/useENSAddress.ts","components/TransactionConfirmationModal/index.tsx","state/swap/hooks.ts","hooks/useTransactionDeadline.ts","hooks/useCurrentBlockTimestamp.ts","hooks/useTokenAllowance.ts","hooks/useApproveCallback.ts","components/NumericalInput/index.tsx","components/CurrencyInputPanel/index.tsx"],"names":["Dots","styled","span","currencyId","currency","ETHER","Token","address","Error","useTotalSupply","token","contract","useTokenContract","totalSupply","useSingleCallResult","result","TokenAmount","toString","undefined","FixedHeightRow","RowBetween","MinimalPositionCard","pair","showUnwrapped","account","useActiveWeb3React","t","useTranslation","currency0","token0","unwrappedToken","currency1","token1","useState","showMore","setShowMore","userPoolBalance","useTokenBalance","liquidityToken","totalPoolTokens","poolTokenPercentage","JSBI","greaterThanOrEqual","raw","Percent","getLiquidityValue","token0Deposited","token1Deposited","greaterThan","BigInt","gap","color","bold","onClick","margin","size","small","symbol","toSignificant","toFixed","asset","ml","fontSize","style","textAlign","role","FullPositionCard","props","borderRadius","justifyContent","p","flexDirection","alignItems","mb","padding","BIG_INT_ZERO","as","Link","to","variant","width","startIcon","SwapWrapper","div","Page","children","className","BASE_FEE","ONE_HUNDRED_PERCENT","subtract","computeSlippageAdjustedAmounts","trade","allowedSlippage","pct","basisPointsToPercent","Field","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","isTradeBetter","tradeA","tradeB","minimumDelta","ZERO_PERCENT","tradeType","currencyEquals","inputAmount","outputAmount","equalTo","executionPrice","lessThan","multiply","add","useAllCommonPairs","currencyA","currencyB","chainId","wrappedCurrency","tokenA","tokenB","bases","useMemo","common","BASES_TO_CHECK_TRADES_AGAINST","additionalA","ADDITIONAL_BASES","additionalB","basePairs","flatMap","base","map","otherBase","allPairCombinations","filter","tokens","Boolean","t0","t1","tokenA_","tokenB_","customBases","CUSTOM_BASES","customBasesA","customBasesB","find","equals","allPairs","usePairs","Object","values","PairState","EXISTS","reduce","memo","curr","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","useUserSingleHopOnly","singleHopOnly","length","Trade","bestTradeExactIn","maxHops","maxNumResults","bestTradeSoFar","i","currentTrade","BETTER_TRADE_LESS_HOPS_THRESHOLD","useTradeExactOut","currencyIn","currencyAmountOut","bestTradeExactOut","useIsTransactionUnsupported","unsupportedTokens","useUnsupportedTokens","tokenIn","tokenOut","keys","includes","useParsedQueryString","search","useLocation","parse","parseArrays","ignoreQueryPrefix","useENS","nameOrAddress","validated","isAddress","reverseLookup","debouncedAddress","useDebounce","ensNodeArgument","namehash","toLowerCase","substr","error","registrarContract","useENSRegistrarContract","resolverAddress","resolverAddressResult","resolverContract","useENSResolverContract","isZero","name","changed","ENSName","loading","useENSName","lookup","ensName","debouncedName","addr","useENSAddress","Wrapper","Section","AutoColumn","ConfirmedIcon","ColumnCenter","ConfirmationPendingContent","pendingText","src","alt","justify","TransactionSubmittedContent","onDismiss","hash","currencyToAdd","library","strokeWidth","external","href","getBscScanLink","provider","isMetaMask","mt","registerToken","decimals","ConfirmationModalContent","bottomContent","topContent","TransactionConfirmationModal","title","customOnDismiss","attemptingTxn","content","handleDismiss","useCallback","headerBackground","tryParseAmount","value","typedValueParsed","parseUnits","CurrencyAmount","ether","console","debug","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useCurrentBlockTimestamp","useTokenAllowance","ApprovalState","owner","spender","inputs","allowance","useApproveCallback","amountToApprove","currentAllowance","pendingApproval","useHasPendingApproval","approvalState","APPROVED","PENDING","NOT_APPROVED","UNKNOWN","tokenContract","addTransaction","useTransactionAdder","approve","a","useExact","estimateGas","MaxUint256","catch","estimatedGas","gasLimit","calculateGasMargin","then","response","summary","approval","tokenAddress","StyledInput","input","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","React","onUserInput","placeholder","rest","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","InputRow","selected","CurrencySelectButton","Button","attrs","scale","LabelRow","InputPanel","BalanceText","Text","CustomRightIcon","ChevronRightIcon","GreyLabel","MNumericalInput","NumericalInput","MaxButton","Container","CurrencyInputPanel","onMax","showMaxButton","label","onCurrencySelect","disableCurrencySelect","hideBalance","hideInput","otherCurrency","id","showCommonBases","selectedCurrencyBalance","useCurrencyBalance","translatedLabel","useModal","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","onPresentCurrencyModal","marginRight","slice","marginLeft","display","cursor","val","amount"],"mappings":"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","file":"static/js/3.269184ee.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport default Dots\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubNav from 'components/Menu/SubNav'\nimport { useTranslation } from 'contexts/Localization'\n\nconst SwapWrapper = styled.div`\n  background-color: #910101;\n  padding-bottom: 60px;\n`\n\nconst Banner = () => {\n  return (\n    <>\n      <div className='banner-wrapper-area hide-ifMobile'>\n        <div className='container'>\n          <div className='row align-items-center m-0'>\n            <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-content'>\n                <h2>ZAP MIRRORS PANCAKESWAP TO EXECUTE QUICK TOKEN SWAP CONVERSION</h2>\n              </div>\n            </div>\n            <div className='col-xl-4 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-image'>\n                <img src='/images/decor-img.png' alt='logo' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <SwapWrapper {...props}>\n        <h1 className=\"page-red-header hide-ifMobile\">{t(\"ZAP\")}</h1>\n        {/* remove padding top when openback subnav */}\n        <div className=\"swap-container\">\n          {/* <SubNav /> */}\n          {children}\n        </div>\n      </SwapWrapper>\n    </>\n  )\n}\n\nexport default Page\n","import { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@pancakeswap/sdk'\nimport {\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n} from '../config/constants'\n\nimport { Field } from '../state/swap/actions'\nimport { basisPointsToPercent } from './index'\n\nconst BASE_FEE = new Percent(JSBI.BigInt(25), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade?: Trade | null): {\n  priceImpactWithoutFee: Percent | undefined\n  realizedLPFee: CurrencyAmount | undefined | null\n} {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade\n    ? undefined\n    : ONE_HUNDRED_PERCENT.subtract(\n        trade.route.pairs.reduce<Fraction>(\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n          ONE_HUNDRED_PERCENT,\n        ),\n      )\n\n  // remove lp fees from price impact\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n  // the x*y=k impact\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\n    : undefined\n\n  // the amount of the input that accrues to LPs\n  const realizedLPFeeAmount =\n    realizedLPFee &&\n    trade &&\n    (trade.inputAmount instanceof TokenAmount\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\n\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n  trade: Trade | undefined,\n  allowedSlippage: number,\n): { [field in Field]?: CurrencyAmount } {\n  const pct = basisPointsToPercent(allowedSlippage)\n  return {\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\n  }\n}\n\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\n  return 0\n}\n\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\n  if (!trade) {\n    return ''\n  }\n  return inverted\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\n        trade.outputAmount.currency.symbol\n      }`\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\n        trade.inputAmount.currency.symbol\n      }`\n}\n","import { Trade, Percent, currencyEquals } from '@pancakeswap/sdk'\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index'\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(\n  tradeA: Trade | undefined | null,\n  tradeB: Trade | undefined | null,\n  minimumDelta: Percent = ZERO_PERCENT,\n): boolean | undefined {\n  if (tradeA && !tradeB) return false\n  if (tradeB && !tradeA) return true\n  if (!tradeA || !tradeB) return undefined\n\n  if (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\n  ) {\n    throw new Error('Trades are not comparable')\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\n  }\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\n}\n\nexport default isTradeBetter\n","/* eslint-disable no-param-reassign */\nimport { isTradeBetter } from 'utils/trades'\nimport { Currency, CurrencyAmount, Pair, Token, Trade } from '@pancakeswap/sdk'\nimport flatMap from 'lodash/flatMap'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\n\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport {\n  BASES_TO_CHECK_TRADES_AGAINST,\n  CUSTOM_BASES,\n  BETTER_TRADE_LESS_HOPS_THRESHOLD,\n  ADDITIONAL_BASES,\n} from '../config/constants'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useUnsupportedTokens } from './Tokens'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const bases: Token[] = useMemo(() => {\n    if (!chainId) return []\n\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\n\n    return [...common, ...additionalA, ...additionalB]\n  }, [chainId, tokenA, tokenB])\n\n  const basePairs: [Token, Token][] = useMemo(\n    () => flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])),\n    [bases],\n  )\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA_, tokenB_]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n\n              const customBasesA: Token[] | undefined = customBases?.[tokenA_.address]\n              const customBasesB: Token[] | undefined = customBases?.[tokenB_.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find((base) => tokenB_.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => tokenA_.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId],\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {}),\n      ),\n    [allPairs],\n  )\n}\n\nconst MAX_HOPS = 3\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade: Trade | null =\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade =\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n    return null\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly])\n}\n\nexport function useIsTransactionUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n  const { chainId } = useActiveWeb3React()\n\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n  // if unsupported list loaded & either token on list, mark as unsupported\n  if (unsupportedTokens) {\n    if (tokenIn && Object.keys(unsupportedTokens).includes(tokenIn.address)) {\n      return true\n    }\n    if (tokenOut && Object.keys(unsupportedTokens).includes(tokenOut.address)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { parse, ParsedQs } from 'qs'\nimport { useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport default function useParsedQueryString(): ParsedQs {\n  const { search } = useLocation()\n  return useMemo(\n    () => (search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}),\n    [search],\n  )\n}\n","import { isAddress } from '../../utils'\nimport useENSAddress from './useENSAddress'\nimport useENSName from './useENSName'\n\n/**\n * Given a name or address, does a lookup to resolve to an address and name\n * @param nameOrAddress ENS name or address\n */\nexport default function useENS(nameOrAddress?: string | null): {\n  loading: boolean\n  address: string | null\n  name: string | null\n} {\n  const validated = isAddress(nameOrAddress)\n  const reverseLookup = useENSName(validated || undefined)\n  const lookup = useENSAddress(nameOrAddress)\n\n  return {\n    loading: reverseLookup.loading || lookup.loading,\n    address: validated || lookup.address,\n    name: reverseLookup.ENSName ? reverseLookup.ENSName : !validated && lookup.address ? nameOrAddress || null : null,\n  }\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport { isAddress } from '../../utils'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\nimport useDebounce from '../useDebounce'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false,\n  )\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n  const changed = debouncedAddress !== address\n  return {\n    ENSName: changed ? null : name.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || name.loading,\n  }\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\nimport useDebounce from '../useDebounce'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined]\n    try {\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false,\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return {\n    address: changed ? null : addr.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || addr.loading,\n  }\n}\n","import React, { useCallback } from 'react'\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport {\n  Button,\n  Text,\n  ErrorIcon,\n  ArrowUpIcon,\n  MetamaskIcon,\n  Flex,\n  Box,\n  Link,\n  Spinner,\n  Modal,\n  InjectedModalProps,\n} from '@pancakeswap/uikit'\nimport { registerToken } from 'utils/wallet'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { RowFixed } from '../Layout/Row'\nimport { AutoColumn, ColumnCenter } from '../Layout/Column'\nimport { getBscScanLink } from '../../utils'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\nconst Section = styled(AutoColumn)`\n  padding: 24px;\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 24px 0;\n`\n\nfunction ConfirmationPendingContent({ pendingText }: { pendingText: string }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <ConfirmedIcon>\n        <img src=\"/logo.png\" alt=\"logo\"/>\n      </ConfirmedIcon>\n      <AutoColumn gap=\"12px\" justify=\"center\">\n        <Text fontSize=\"20px\">{t('Waiting For Confirmation')}</Text>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text bold small textAlign=\"center\">\n            {pendingText}\n          </Text>\n        </AutoColumn>\n        <Text small color=\"primary\" textAlign=\"center\">\n          {t('Confirm this transaction in your wallet')}\n        </Text>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nfunction TransactionSubmittedContent({\n  onDismiss,\n  chainId,\n  hash,\n  currencyToAdd,\n}: {\n  onDismiss: () => void\n  hash: string | undefined\n  chainId: ChainId\n  currencyToAdd?: Currency | undefined\n}) {\n  const { library } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  return (\n    <Wrapper>\n      <Section>\n        <ConfirmedIcon>\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\n        </ConfirmedIcon>\n        <AutoColumn gap=\"12px\" justify=\"center\">\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\n          {chainId && hash && (\n            <Link external small href={getBscScanLink(hash, 'transaction', chainId)}>\n              {t('View on BscScan')}\n            </Link>\n          )}\n          {currencyToAdd && library?.provider?.isMetaMask && (\n            <Button\n              variant=\"tertiary\"\n              mt=\"12px\"\n              width=\"fit-content\"\n              onClick={() => registerToken(token.address, token.symbol, token.decimals)}\n            >\n              <RowFixed>\n                {t('Add %asset% to Metamask', { asset: currencyToAdd.symbol })}\n                <MetamaskIcon width=\"16px\" ml=\"6px\" />\n              </RowFixed>\n            </Button>\n          )}\n          <Button onClick={onDismiss} mt=\"20px\">\n            {t('Close')}\n          </Button>\n        </AutoColumn>\n      </Section>\n    </Wrapper>\n  )\n}\n\nexport function ConfirmationModalContent({\n  bottomContent,\n  topContent,\n}: {\n  topContent: () => React.ReactNode\n  bottomContent: () => React.ReactNode\n}) {\n  return (\n    <Wrapper>\n      <Box>{topContent()}</Box>\n      <Box>{bottomContent()}</Box>\n    </Wrapper>\n  )\n}\n\nexport function TransactionErrorContent({ message, onDismiss }: { message: string; onDismiss: () => void }) {\n  const { t } = useTranslation()\n  return (\n    <Wrapper>\n      <AutoColumn justify=\"center\">\n        <ErrorIcon color=\"failure\" width=\"64px\" />\n        <Text color=\"failure\" style={{ textAlign: 'center', width: '85%' }}>\n          {message}\n        </Text>\n      </AutoColumn>\n\n      <Flex justifyContent=\"center\" pt=\"24px\">\n        <Button onClick={onDismiss}>{t('Dismiss')}</Button>\n      </Flex>\n    </Wrapper>\n  )\n}\n\ninterface ConfirmationModalProps {\n  title: string\n  customOnDismiss?: () => void\n  hash: string | undefined\n  content: () => React.ReactNode\n  attemptingTxn: boolean\n  pendingText: string\n  currencyToAdd?: Currency | undefined\n}\n\nconst TransactionConfirmationModal: React.FC<InjectedModalProps & ConfirmationModalProps> = ({\n  title,\n  onDismiss,\n  customOnDismiss,\n  attemptingTxn,\n  hash,\n  pendingText,\n  content,\n  currencyToAdd,\n}) => {\n  const { chainId } = useActiveWeb3React()\n\n  const handleDismiss = useCallback(() => {\n    if (customOnDismiss) {\n      customOnDismiss()\n    }\n    onDismiss()\n  }, [customOnDismiss, onDismiss])\n\n  if (!chainId) return null\n\n  return (\n    <Modal title={title} headerBackground=\"gradients.cardHeader\" onDismiss={handleDismiss}>\n      {attemptingTxn ? (\n        <ConfirmationPendingContent pendingText={pendingText} />\n      ) : hash ? (\n        <TransactionSubmittedContent\n          chainId={chainId}\n          hash={hash}\n          onDismiss={onDismiss}\n          currencyToAdd={currencyToAdd}\n        />\n      ) : (\n        content()\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionConfirmationModal\n","import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@pancakeswap/sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useENS from 'hooks/ENS/useENS'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\nimport { AppDispatch, AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport { useUserSlippageTolerance } from '../user/hooks'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n} {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t('Connect Wallet')\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t('Enter an amount')\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t('Select a token')\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t('Enter a recipient')\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? t('Invalid recipient')\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return 'BNB' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: null,\n      }),\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n","import { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from 'ethers'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\n    [token, allowance],\n  )\n}\n\nexport default useTokenAllowance\n","import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport useTokenAllowance from './useTokenAllowance'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract } from './useContract'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    // eslint-disable-next-line consistent-return\n    return tokenContract\n      .approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n        gasLimit: calculateGasMargin(estimatedGas),\n      })\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          approval: { tokenAddress: token.address, spender },\n        })\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 18px;\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  const { t } = useTranslation()\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={(event) => {\n        // replace commas with periods, because we exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title={t('Token Amount')}\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n","import React from 'react'\nimport { Currency, Pair } from '@pancakeswap/sdk'\nimport { Button, ChevronRightIcon, Text, useModal, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\nimport { Input as NumericalInput } from '../NumericalInput'\n\nconst InputRow = styled.div<{ selected: boolean }>`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  padding: ${({ selected }) => (selected ? '-0.5rem 0.5rem 0.75rem 1rem' : '-0.5rem 0.75rem 0.75rem 1rem')};\n`\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'md' })`\n  padding: 0;\n  padding-bottom: 10px;\n  border-radius: 0;\n  justify-content: flex-start;\n  border-bottom: 2px solid #910101;\n  margin-bottom: 20px;\n`\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 1rem;\n  line-height: 1rem;\n`\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\n  display: flex;\n  flex-flow: column nowrap;\n  position: relative;\n  border-bottom: 2px solid #910101;\n  z-index: 1;\n`\n\nconst BalanceText = styled(Text)`\n  color: #910101;\n  font-weight: bold;\n  font-size: 14px;\n`\n\nconst CustomRightIcon = styled(ChevronRightIcon)`\n  width: 45px;\n  fill: #910101;\n`\n\nconst GreyLabel = styled(Text)`\n  color: #98A1B9;\n  font-weight: bold;\n  // font-size: 25px;\n`\n\nconst MNumericalInput = styled(NumericalInput)`\n  // font-size: 25px;\n`\n\nconst MaxButton = styled(Button)`\n  // font-size: 25px;\n  color: #910101;\n`\n\nconst Container = styled.div<{ hideInput: boolean }>`\n`\ninterface CurrencyInputPanelProps {\n  value: string\n  onUserInput: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | null\n  hideInput?: boolean\n  otherCurrency?: Currency | null\n  id: string\n  showCommonBases?: boolean\n}\n\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label,\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  hideInput = false,\n  otherCurrency,\n  id,\n  showCommonBases,\n}: CurrencyInputPanelProps) {\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n  const { t } = useTranslation()\n  const translatedLabel = label || t('Input')\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={onCurrencySelect}\n      selectedCurrency={currency}\n      otherSelectedCurrency={otherCurrency}\n      showCommonBases={showCommonBases}\n    />,\n  )\n  return (\n    <>\n      <GreyLabel>{translatedLabel}</GreyLabel>\n      <CurrencySelectButton\n        selected={!!currency}\n        className=\"open-currency-select-button\"\n        onClick={() => {\n          if (!disableCurrencySelect) {\n            onPresentCurrencyModal()\n          }\n        }}\n      >\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          {pair ? (\n            <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={30} margin />\n          ) : currency ? (\n            <CurrencyLogo currency={currency} size=\"30px\" style={{ marginRight: '20px' }} />\n          ) : null}\n          {pair ? (\n            <Text fontSize=\"18px\" id=\"pair\">\n              {pair?.token0.symbol}:{pair?.token1.symbol}\n            </Text>\n          ) : (\n            <Text id=\"pair\" className=\"text-grey\">\n              {(currency && currency.symbol && currency.symbol.length > 20\n                ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\n                  currency.symbol.length - 5,\n                  currency.symbol.length,\n                )}`\n                : currency?.symbol) || t('Select a currency')}\n            </Text>\n          )}\n        </Flex>\n        {!disableCurrencySelect && <CustomRightIcon style={{ marginLeft: 'auto' }} />}\n      </CurrencySelectButton>\n      <GreyLabel>{t('Amount')}</GreyLabel>\n      <InputPanel id={id}>\n        <Container hideInput={hideInput}>\n          {!hideInput && (\n            <LabelRow>\n              {account && (\n                <Text onClick={onMax} fontSize=\"18px\" style={{ display: 'inline', cursor: 'pointer' }} />\n              )}\n            </LabelRow>\n          )}\n          <InputRow className=\"custom-zap-row\" style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableCurrencySelect}>\n            {!hideInput && (\n              <>\n                <MNumericalInput\n                  className=\"token-amount-input\"\n                  value={value}\n                  onUserInput={(val) => {\n                    onUserInput(val)\n                  }}\n                  placeholder={t('Enter your amount')}\n                />\n                {account && currency && showMaxButton && label !== 'To' && (\n                  <MaxButton onClick={onMax} scale=\"sm\" variant=\"text\">\n                    {t(\"MAX\")}\n                  </MaxButton>\n                )}\n              </>\n            )}\n          </InputRow>\n        </Container>\n      </InputPanel>\n      <BalanceText>{!hideBalance && !!currency && selectedCurrencyBalance\n        ? t('Balance: %amount%', { amount: selectedCurrencyBalance?.toSignificant(6) ?? '' })\n        : t('Balance: -')}\n      </BalanceText>\n    </>\n  )\n}\n"],"sourceRoot":""}