{"version":3,"sources":["components/Logo/DoubleLogo.tsx","components/Logo/ListLogo.tsx","components/Logo/NetworkLogo.tsx","state/wallet/hooks.ts","utils/getTokenLogoURL.ts","components/Logo/CurrencyLogo.tsx","components/Card/index.tsx","utils/isZero.ts","components/Logo/Logo.tsx","hooks/useHttpLocations.ts","hooks/ENS/useENSContentHash.ts","components/SearchModal/CommonBases.tsx","components/SearchModal/ImportRow.tsx","components/SearchModal/CurrencyList.tsx","components/SearchModal/sorting.ts","components/SearchModal/CurrencySearch.tsx","components/SearchModal/ImportToken.tsx","components/SearchModal/types.ts","components/SearchModal/ManageLists.tsx","components/SearchModal/ManageTokens.tsx","components/SearchModal/Manage.tsx","components/SearchModal/ImportList.tsx","components/SearchModal/CurrencySearchModal.tsx"],"names":["Wrapper","styled","div","margin","DoubleCurrencyLogo","currency0","currency1","size","CurrencyLogo","currency","toString","style","marginRight","StyledListLogo","Logo","ListLogo","logoURI","alt","srcs","useHttpLocations","StyledLogo","NetworkLogo","network","name","width","imgLink","symbol","useTokenBalancesWithLoadingIndicator","address","tokens","validatedTokens","useMemo","filter","t","isAddress","validatedTokenAddresses","map","vt","balances","useMultipleContractSingleData","ERC20_INTERFACE","anyLoading","some","callState","loading","length","reduce","memo","token","i","value","result","amount","JSBI","BigInt","undefined","TokenAmount","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","Token","ethBalance","uncheckedAddresses","multicallContract","useMulticallContract","addresses","a","sort","results","useSingleContractMultipleData","CurrencyAmount","ether","useBNBBalances","ETHER","useCurrencyBalance","useAllTokenBalances","useWeb3React","allTokens","useAllTokens","Object","values","getTokenLogoURL","uriLocations","WrappedTokenInfo","Card","Box","padding","border","borderRadius","theme","colors","background","LightCard","backgroundAlt","LightGreyCard","cardBorder","dropdown","isZero","hexNumberString","test","BAD_SRCS","rest","useState","refresh","src","find","s","onError","uri","ens","parseENSAddress","resolvedContentHash","ensName","ensNodeArgument","namehash","error","registrarContract","useENSRegistrarContract","resolverAddressResult","useSingleCallResult","resolverAddress","resolverContract","useENSResolverContract","contenthash","useENSContentHash","uriToHttp","contenthashToUri","BaseWrapper","disable","CommonBases","chainId","onSelect","selectedCurrency","useTranslation","gap","fontSize","QuestionHelper","text","ml","onClick","currencyEquals","SUGGESTED_BASES","selected","TokenSection","dim","CheckIcon","CheckmarkCircleIcon","success","NameOverflow","ImportRow","showImportView","setImportToken","useActiveWeb3React","inactiveTokenList","useCombinedInactiveList","list","isAdded","useIsUserAddedToken","isActive","useIsTokenActive","opacity","color","title","small","mr","minWidth","currencyKey","StyledBalanceText","Text","FixedContentRow","Balance","balance","toExact","toSignificant","MenuItem","RowBetween","disabled","CurrencyRow","isSelected","otherSelected","key","selectedTokenList","useCombinedActiveList","isOnSelectedList","isTokenOnList","customAdded","className","Column","bold","ellipsis","maxWidth","justifySelf","CircleLoader","CurrencyList","height","onCurrencySelect","otherCurrency","fixedListRef","showETH","breakIndex","itemData","formatted","Currency","slice","inactiveTokens","useAllInactiveTokens","Row","useCallback","data","index","Boolean","wrappedCurrency","showImport","keys","includes","itemKey","ref","itemCount","itemSize","useTokenComparator","inverted","comparator","tokenA","tokenB","balanceA","balanceB","balanceComp","greaterThan","equalTo","toLowerCase","getTokenComparator","CurrencySearch","otherSelectedCurrency","showCommonBases","fixedList","useRef","searchQuery","setSearchQuery","debouncedQuery","useDebounce","invertSearchOrder","searchToken","useToken","searchTokenIsAdded","trim","tokenComparator","filteredTokens","filterTokens","sortedTokens","filteredSortedTokens","useSortedTokensByQuery","handleCurrencySelect","inputRef","useEffect","current","focus","handleInput","event","input","target","checksummedInput","scrollTo","handleEnter","e","useFoundOnInactiveList","filteredInactiveTokens","id","placeholder","scale","autoComplete","onChange","onKeyDown","concat","textAlign","mb","ImportToken","CurrencyModalView","confirmed","setConfirmed","addToken","useAddUserToken","variant","substring","gridTemplateRows","gridGap","outline","startIcon","alignItems","justifyContent","href","getBscScanLink","external","type","checked","userSelect","RowWrapper","active","tertiary","MToggle","Toggle","listUrlRowHTMLId","listUrl","replace","ListRow","version","listsByUrl","useSelector","state","lists","byUrl","dispatch","useDispatch","pending","pendingUpdate","useIsListActive","handleAcceptListUpdate","acceptListUpdate","handleRemoveList","window","confirm","removeList","handleEnableList","enableList","handleDisableList","disableList","useTooltip","major","minor","patch","placement","trigger","targetRef","tooltip","tooltipVisible","flex","mt","textTransform","ListContainer","ManageLists","setModalView","setImportList","setListUrl","listUrlInput","setListUrlInput","useAllLists","activeListUrls","useActiveListUrls","activeCopy","setActiveCopy","fetchList","useFetchListCallback","validUrl","sortedLists","UNSUPPORTED_LIST_URLS","u1","u2","l1","l2","tempList","setTempList","addError","setAddError","then","catch","fetchTempList","isImported","handleImport","importList","textOverflow","overflow","paddingTop","marginLeft","Footer","ManageTokens","userAddedTokens","useUserAddedTokens","removeToken","useRemoveUserAddedToken","handleRemoveAll","tokenList","isAddressValid","isWarning","importToken","StyledButtonMenu","ButtonMenu","Manage","showLists","setShowLists","activeIndex","onItemClick","prev","TextDot","ImportList","listURL","onImport","useTheme","adding","loadingRequestId","handleAddList","message","flexDirection","failure","StyledModalContainer","ModalContainer","StyledModalBody","ModalBody","CurrencySearchModal","onDismiss","search","modalView","prevView","usePrevious","config","onBack","manage"],"mappings":"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","file":"static/js/0.c1ee82c6.chunk.js","sourcesContent":["import { Currency } from '@pancakeswap/sdk'\nimport React from 'react'\nimport styled from 'styled-components'\nimport CurrencyLogo from './CurrencyLogo'\n\nconst Wrapper = styled.div<{ margin: boolean }>`\n  display: flex;\n  flex-direction: row;\n  margin-right: ${({ margin }) => margin && '4px'};\n`\n\ninterface DoubleCurrencyLogoProps {\n  margin?: boolean\n  size?: number\n  currency0?: Currency\n  currency1?: Currency\n}\n\nexport default function DoubleCurrencyLogo({\n  currency0,\n  currency1,\n  size = 20,\n  margin = false,\n}: DoubleCurrencyLogoProps) {\n  return (\n    <Wrapper margin={margin}>\n      {currency0 && <CurrencyLogo currency={currency0} size={`${size.toString()}px`} style={{ marginRight: '4px' }} />}\n      {currency1 && <CurrencyLogo currency={currency1} size={`${size.toString()}px`} />}\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport Logo from './Logo'\n\nconst StyledListLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function ListLogo({\n  logoURI,\n  style,\n  size = '24px',\n  alt,\n}: {\n  logoURI: string\n  size?: string\n  style?: React.CSSProperties\n  alt?: string\n}) {\n  const srcs: string[] = useHttpLocations(logoURI)\n\n  return <StyledListLogo alt={alt} size={size} srcs={srcs} style={style} />\n}\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { BinanceIcon } from '@pancakeswap/uikit'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport getTokenLogoURL from '../../utils/getTokenLogoURL'\nimport Logo from './Logo'\n\nconst StyledLogo = styled(Logo) <{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\ninterface networkProps {\n  name: string\n  symbol: string\n  imgLink: string\n  projectLink: string\n}\n\nexport default function NetworkLogo({\n  network,\n  size = '24px',\n  style,\n}: {\n  network?: networkProps\n  size?: string\n  style?: React.CSSProperties\n}) {\n\n  if (network.name === \"bsc\") {\n    return <BinanceIcon width={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={[network.imgLink]} alt={`${network?.symbol ?? 'network'} logo`} style={style} />\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ERC20_INTERFACE from 'config/abi/erc20'\nimport { useAllTokens, useAllZapTokens } from 'hooks/Tokens'\nimport { useMulticallContract } from 'hooks/useContract'\nimport { isAddress } from 'utils'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\n\n/**\n * Returns a map of the given addresses to their eventually consistent BNB balances.\n */\nexport function useBNBBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount | undefined\n} {\n  const multicallContract = useMulticallContract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n          .map(isAddress)\n          .filter((a): a is string => a !== false)\n          .sort()\n        : [],\n    [uncheckedAddresses],\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map((address) => [address]),\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, results],\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens],\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = new TokenAmount(token, amount)\n            }\n            return memo\n          }, {})\n          : {},\n      [address, validatedTokens, balances],\n    ),\n    anyLoading,\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): { [tokenAddress: string]: TokenAmount | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[],\n): (CurrencyAmount | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [],\n    [currencies],\n  )\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsBNB: boolean = useMemo(() => currencies?.some((currency) => currency === ETHER) ?? false, [currencies])\n  const ethBalance = useBNBBalances(containsBNB ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency) return undefined\n        if (currency instanceof Token) return tokenBalances[currency.address]\n        if (currency === ETHER) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances],\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\nexport function useAllZapTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useWeb3React()\n  const allZapTokens = useAllZapTokens()\n  const allZapTokensArray = useMemo(() => Object.values(allZapTokens ?? {}), [allZapTokens])\n  const balances = useTokenBalances(account ?? undefined, allZapTokensArray)\n  return balances ?? {}\n}\n","const getTokenLogoURL = (address: string) =>\n  `/images/tokens/${address}.svg`\n// `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${address}/logo.png`\n\nexport default getTokenLogoURL\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { BinanceIcon } from '@pancakeswap/uikit'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport getTokenLogoURL from '../../utils/getTokenLogoURL'\nimport Logo from './Logo'\n\nconst StyledLogo = styled(Logo) <{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)]\n      }\n      return [getTokenLogoURL(currency.address)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency === ETHER) {\n    return <BinanceIcon width={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n","import styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\n\nconst Card = styled(Box)<{\n  width?: string\n  padding?: string\n  border?: string\n  borderRadius?: string\n}>`\n  width: ${({ width }) => width ?? '100%'};\n  border-radius: 16px;\n  padding: 1.25rem;\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n  background-color: ${({ theme }) => theme.colors.background};\n`\nexport default Card\n\nexport const LightCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.colors.background};\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nexport const LightGreyCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport const GreyCard = styled(Card)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n","/**\n * Returns true if the string value is zero in hex\n * @param hexNumberString\n */\nexport default function isZero(hexNumberString: string) {\n  return /^0x0*$/.test(hexNumberString)\n}\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: { [tokenAddress: string]: true } = {}\n\nexport interface LogoProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  srcs: string[]\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback triangle alert\n */\nconst Logo: React.FC<LogoProps> = ({ srcs, alt, ...rest }) => {\n  const [, refresh] = useState<number>(0)\n\n  const src: string | undefined = srcs.find((s) => !BAD_SRCS[s])\n\n  if (src) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS[src] = true\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default Logo\n","import { useMemo } from 'react'\nimport contenthashToUri from 'utils/contenthashToUri'\nimport { parseENSAddress } from 'utils/ENS/parseENSAddress'\nimport uriToHttp from 'utils/uriToHttp'\nimport useENSContentHash from './ENS/useENSContentHash'\n\nexport default function useHttpLocations(uri: string | undefined): string[] {\n  const ens = useMemo(() => (uri ? parseENSAddress(uri) : undefined), [uri])\n  const resolvedContentHash = useENSContentHash(ens?.ensName)\n  return useMemo(() => {\n    if (ens) {\n      return resolvedContentHash.contenthash ? uriToHttp(contenthashToUri(resolvedContentHash.contenthash)) : []\n    }\n    return uri ? uriToHttp(uri) : []\n  }, [ens, resolvedContentHash.contenthash, uri])\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\n\n/**\n * Does a lookup for an ENS name to find its contenthash.\n */\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\n  const ensNodeArgument = useMemo(() => {\n    if (!ensName) return [undefined]\n    try {\n      return ensName ? [namehash(ensName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [ensName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddress = resolverAddressResult.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\n    false,\n  )\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\n\n  return {\n    contenthash: contenthash.result?.[0] ?? null,\n    loading: resolverAddressResult.loading || contenthash.loading,\n  }\n}\n","import React from 'react'\nimport { ChainId, Currency, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { SUGGESTED_BASES } from '../../config/constants'\nimport { AutoColumn } from '../Layout/Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\n\nconst BaseWrapper = styled.div<{ disable?: boolean }>`\n  border: 1px solid ${({ theme, disable }) => (disable ? 'transparent' : theme.colors.dropdown)};\n  border-radius: 10px;\n  display: flex;\n  padding: 6px;\n\n  align-items: center;\n  :hover {\n    cursor: ${({ disable }) => !disable && 'pointer'};\n    background-color: ${({ theme, disable }) => !disable && theme.colors.background};\n  }\n\n  background-color: ${({ theme, disable }) => disable && theme.colors.dropdown};\n  opacity: ${({ disable }) => disable && '0.4'};\n`\n\nexport default function CommonBases({\n  chainId,\n  onSelect,\n  selectedCurrency,\n}: {\n  chainId?: ChainId\n  selectedCurrency?: Currency | null\n  onSelect: (currency: Currency) => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow>\n        <Text fontSize=\"14px\">{t('Common bases')}</Text>\n        <QuestionHelper text={t('These tokens are commonly paired with other tokens.')} ml=\"4px\" />\n      </AutoRow>\n      <AutoRow gap=\"auto\">\n        <BaseWrapper\n          onClick={() => {\n            if (!selectedCurrency || !currencyEquals(selectedCurrency, ETHER)) {\n              onSelect(ETHER)\n            }\n          }}\n          disable={selectedCurrency === ETHER}\n        >\n          <CurrencyLogo currency={ETHER} style={{ marginRight: 8 }} />\n          <Text>BNB</Text>\n        </BaseWrapper>\n        {(chainId ? SUGGESTED_BASES[chainId] : []).map((token: Token) => {\n          const selected = selectedCurrency instanceof Token && selectedCurrency.address === token.address\n          return (\n            <BaseWrapper onClick={() => !selected && onSelect(token)} disable={selected} key={token.address}>\n              <CurrencyLogo currency={token} style={{ marginRight: 8 }} />\n              <Text>{token.symbol}</Text>\n            </BaseWrapper>\n          )\n        })}\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n","import React, { CSSProperties } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Button, Text, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport { AutoRow, RowFixed } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { ListLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport styled from 'styled-components'\nimport { useIsUserAddedToken, useIsTokenActive } from 'hooks/Tokens'\nimport { useTranslation } from 'contexts/Localization'\n\nconst TokenSection = styled.div<{ dim?: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) auto;\n  grid-gap: 16px;\n  align-items: center;\n\n  opacity: ${({ dim }) => (dim ? '0.4' : '1')};\n`\n\nconst CheckIcon = styled(CheckmarkCircleIcon)`\n  height: 16px;\n  width: 16px;\n  margin-right: 6px;\n  stroke: ${({ theme }) => theme.colors.success};\n`\n\nconst NameOverflow = styled.div`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 140px;\n  font-size: 12px;\n`\n\nexport default function ImportRow({\n  token,\n  style,\n  dim,\n  showImportView,\n  setImportToken,\n}: {\n  token: Token\n  style?: CSSProperties\n  dim?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}) {\n  // gloabls\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  // check if token comes from list\n  const inactiveTokenList = useCombinedInactiveList()\n  const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n\n  // check if already active on list or local storage tokens\n  const isAdded = useIsUserAddedToken(token)\n  const isActive = useIsTokenActive(token)\n\n  return (\n    <TokenSection style={style}>\n      <CurrencyLogo currency={token} size=\"24px\" style={{ opacity: dim ? '0.6' : '1' }} />\n      <AutoColumn gap=\"4px\" style={{ opacity: dim ? '0.6' : '1' }}>\n        <AutoRow>\n          <Text>{token.symbol}</Text>\n          <Text color=\"textDisabled\" ml=\"8px\">\n            <NameOverflow title={token.name}>{token.name}</NameOverflow>\n          </Text>\n        </AutoRow>\n        {list && list.logoURI && (\n          <RowFixed>\n            <Text small mr=\"4px\" color=\"textSubtle\">\n              {t('via')} {list.name}\n            </Text>\n            <ListLogo logoURI={list.logoURI} size=\"12px\" />\n          </RowFixed>\n        )}\n      </AutoColumn>\n      {!isActive && !isAdded ? (\n        <Button\n          width=\"fit-content\"\n          onClick={() => {\n            if (setImportToken) {\n              setImportToken(token)\n            }\n            showImportView()\n          }}\n        >\n          {t('Import')}\n        </Button>\n      ) : (\n        <RowFixed style={{ minWidth: 'fit-content' }}>\n          <CheckIcon />\n          <Text color=\"success\">Active</Text>\n        </RowFixed>\n      )}\n    </TokenSection>\n  )\n}\n","import React, { CSSProperties, MutableRefObject, useCallback, useMemo } from 'react'\nimport { Currency, CurrencyAmount, currencyEquals, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { FixedSizeList } from 'react-window'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { LightGreyCard } from 'components/Card'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedActiveList } from '../../state/lists/hooks'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport { useIsUserAddedToken, useAllInactiveTokens } from '../../hooks/Tokens'\nimport Column from '../Layout/Column'\nimport { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyLogo } from '../Logo'\nimport CircleLoader from '../Loader/CircleLoader'\nimport { isTokenOnList } from '../../utils'\nimport ImportRow from './ImportRow'\n\nfunction currencyKey(currency: Currency): string {\n  return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : ''\n}\n\nconst StyledBalanceText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 5rem;\n  text-overflow: ellipsis;\n`\n\nconst FixedContentRow = styled.div`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-gap: 16px;\n  align-items: center;\n`\n\nfunction Balance({ balance }: { balance: CurrencyAmount }) {\n  return <StyledBalanceText title={balance.toExact()}>{balance.toSignificant(4)}</StyledBalanceText>\n}\n\nconst MenuItem = styled(RowBetween)<{ disabled: boolean; selected: boolean }>`\n  padding: 4px 20px;\n  height: 56px;\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1fr) minmax(0, 72px);\n  grid-gap: 8px;\n  cursor: ${({ disabled }) => !disabled && 'pointer'};\n  pointer-events: ${({ disabled }) => disabled && 'none'};\n  :hover {\n    background-color: ${({ theme, disabled }) => !disabled && theme.colors.background};\n  }\n  opacity: ${({ disabled, selected }) => (disabled || selected ? 0.5 : 1)};\n`\n\nfunction CurrencyRow({\n  currency,\n  onSelect,\n  isSelected,\n  otherSelected,\n  style,\n}: {\n  currency: Currency\n  onSelect: () => void\n  isSelected: boolean\n  otherSelected: boolean\n  style: CSSProperties\n}) {\n  const { account } = useActiveWeb3React()\n  const key = currencyKey(currency)\n  const selectedTokenList = useCombinedActiveList()\n  const isOnSelectedList = isTokenOnList(selectedTokenList, currency)\n  const customAdded = useIsUserAddedToken(currency)\n  const balance = useCurrencyBalance(account ?? undefined, currency)\n\n  // only show add or remove buttons if not on selected list\n  return (\n    <MenuItem\n      style={style}\n      className={`token-item-${key}`}\n      onClick={() => (isSelected ? null : onSelect())}\n      disabled={isSelected}\n      selected={otherSelected}\n    >\n      <CurrencyLogo currency={currency} size=\"24px\" />\n      <Column>\n        <Text bold>{currency.symbol}</Text>\n        <Text color=\"textSubtle\" small ellipsis maxWidth=\"200px\">\n          {!isOnSelectedList && customAdded && 'Added by user •'} {currency.name}\n        </Text>\n      </Column>\n      <RowFixed style={{ justifySelf: 'flex-end' }}>\n        {balance ? <Balance balance={balance} /> : account ? <CircleLoader /> : null}\n      </RowFixed>\n    </MenuItem>\n  )\n}\n\nexport default function CurrencyList({\n  height,\n  currencies,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  fixedListRef,\n  showETH,\n  showImportView,\n  setImportToken,\n  breakIndex,\n}: {\n  height: number\n  currencies: Currency[]\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherCurrency?: Currency | null\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>\n  showETH: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n  breakIndex: number | undefined\n}) {\n  const itemData: (Currency | undefined)[] = useMemo(() => {\n    let formatted: (Currency | undefined)[] = showETH ? [Currency.ETHER, ...currencies] : currencies\n    if (breakIndex !== undefined) {\n      formatted = [...formatted.slice(0, breakIndex), undefined, ...formatted.slice(breakIndex, formatted.length)]\n    }\n    return formatted\n  }, [breakIndex, currencies, showETH])\n\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const inactiveTokens: {\n    [address: string]: Token\n  } = useAllInactiveTokens()\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Currency = data[index]\n      const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency))\n      const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency))\n      const handleSelect = () => onCurrencySelect(currency)\n\n      const token = wrappedCurrency(currency, chainId)\n\n      const showImport = inactiveTokens && token && Object.keys(inactiveTokens).includes(token.address)\n\n      if (index === breakIndex || !data) {\n        return (\n          <FixedContentRow style={style}>\n            <LightGreyCard padding=\"8px 12px\" borderRadius=\"8px\">\n              <RowBetween>\n                <Text small>{t('Expanded results from inactive Token Lists')}</Text>\n                <QuestionHelper\n                  text={t(\n                    \"Tokens from inactive lists. Import specific tokens below or click 'Manage' to activate more lists.\",\n                  )}\n                  ml=\"4px\"\n                />\n              </RowBetween>\n            </LightGreyCard>\n          </FixedContentRow>\n        )\n      }\n\n      if (showImport && token) {\n        return (\n          <ImportRow style={style} token={token} showImportView={showImportView} setImportToken={setImportToken} dim />\n        )\n      }\n      return (\n        <CurrencyRow\n          style={style}\n          currency={currency}\n          isSelected={isSelected}\n          onSelect={handleSelect}\n          otherSelected={otherSelected}\n        />\n      )\n    },\n    [\n      chainId,\n      inactiveTokens,\n      onCurrencySelect,\n      otherCurrency,\n      selectedCurrency,\n      setImportToken,\n      showImportView,\n      breakIndex,\n      t,\n    ],\n  )\n\n  const itemKey = useCallback((index: number, data: any) => currencyKey(data[index]), [])\n\n  return (\n    <FixedSizeList\n      height={height}\n      ref={fixedListRef as any}\n      width=\"100%\"\n      itemData={itemData}\n      itemCount={itemData.length}\n      itemSize={56}\n      itemKey={itemKey}\n    >\n      {Row}\n    </FixedSizeList>\n  )\n}\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  }\n  if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  }\n  if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(balances: {\n  [tokenAddress: string]: TokenAmount | undefined\n}): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    if (tokenA.symbol && tokenB.symbol) {\n      // sort by symbol\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n    }\n    return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0\n  }\n}\n\nfunction useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(balances ?? {}), [balances])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    }\n    return comparator\n  }, [inverted, comparator])\n}\n\nexport default useTokenComparator\n","import React, { KeyboardEvent, RefObject, useCallback, useMemo, useRef, useState, useEffect } from 'react'\nimport { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { Text, Input, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { FixedSizeList } from 'react-window'\nimport useDebounce from 'hooks/useDebounce'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useAllTokens, useToken, useIsUserAddedToken, useFoundOnInactiveList } from '../../hooks/Tokens'\nimport { isAddress } from '../../utils'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport Row from '../Layout/Row'\nimport CommonBases from './CommonBases'\nimport CurrencyList from './CurrencyList'\nimport { filterTokens, useSortedTokensByQuery } from './filtering'\nimport useTokenComparator from './sorting'\n\nimport ImportRow from './ImportRow'\n\ninterface CurrencySearchProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n  showImportView: () => void\n  setImportToken: (token: Token) => void\n}\n\nfunction CurrencySearch({\n  selectedCurrency,\n  onCurrencySelect,\n  otherSelectedCurrency,\n  showCommonBases,\n  showImportView,\n  setImportToken,\n}: CurrencySearchProps) {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n\n  // refs for fixed size lists\n  const fixedList = useRef<FixedSizeList>()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const debouncedQuery = useDebounce(searchQuery, 200)\n\n  const [invertSearchOrder] = useState<boolean>(false)\n\n  const allTokens = useAllTokens()\n\n  // if they input an address, use it\n  const searchToken = useToken(debouncedQuery)\n  const searchTokenIsAdded = useIsUserAddedToken(searchToken)\n\n  const showETH: boolean = useMemo(() => {\n    const s = debouncedQuery.toLowerCase().trim()\n    return s === '' || s === 'b' || s === 'bn' || s === 'bnb'\n  }, [debouncedQuery])\n\n  const tokenComparator = useTokenComparator(invertSearchOrder)\n\n  const filteredTokens: Token[] = useMemo(() => {\n    return filterTokens(Object.values(allTokens), debouncedQuery)\n  }, [allTokens, debouncedQuery])\n\n  const sortedTokens: Token[] = useMemo(() => {\n    return filteredTokens.sort(tokenComparator)\n  }, [filteredTokens, tokenComparator])\n\n  const filteredSortedTokens = useSortedTokensByQuery(sortedTokens, debouncedQuery)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onCurrencySelect(currency)\n    },\n    [onCurrencySelect],\n  )\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n\n  useEffect(() => {\n    inputRef.current.focus()\n  }, [])\n\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n    fixedList.current?.scrollTo(0)\n  }, [])\n\n  const handleEnter = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        const s = debouncedQuery.toLowerCase().trim()\n        if (s === 'bnb') {\n          handleCurrencySelect(ETHER)\n        } else if (filteredSortedTokens.length > 0) {\n          if (\n            filteredSortedTokens[0].symbol?.toLowerCase() === debouncedQuery.trim().toLowerCase() ||\n            filteredSortedTokens.length === 1\n          ) {\n            handleCurrencySelect(filteredSortedTokens[0])\n          }\n        }\n      }\n    },\n    [filteredSortedTokens, handleCurrencySelect, debouncedQuery],\n  )\n\n  // if no results on main list, show option to expand into inactive\n  const inactiveTokens = useFoundOnInactiveList(debouncedQuery)\n  const filteredInactiveTokens: Token[] = useSortedTokensByQuery(inactiveTokens, debouncedQuery)\n\n  return (\n    <>\n      <div>\n        <AutoColumn gap=\"16px\">\n          <Row>\n            <Input\n              className=\"swap-setting-input\"\n              id=\"token-search-input\"\n              placeholder={t('Search name or paste address')}\n              scale=\"lg\"\n              autoComplete=\"off\"\n              value={searchQuery}\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              onKeyDown={handleEnter}\n            />\n          </Row>\n          {showCommonBases && (\n            <CommonBases chainId={chainId} onSelect={handleCurrencySelect} selectedCurrency={selectedCurrency} />\n          )}\n        </AutoColumn>\n        {searchToken && !searchTokenIsAdded ? (\n          <Column style={{ padding: '20px 0', height: '100%' }}>\n            <ImportRow token={searchToken} showImportView={showImportView} setImportToken={setImportToken} />\n          </Column>\n        ) : filteredSortedTokens?.length > 0 || filteredInactiveTokens?.length > 0 ? (\n          <Box margin=\"24px -24px\">\n            <CurrencyList\n              height={390}\n              showETH={showETH}\n              currencies={\n                filteredInactiveTokens ? filteredSortedTokens.concat(filteredInactiveTokens) : filteredSortedTokens\n              }\n              breakIndex={inactiveTokens && filteredSortedTokens ? filteredSortedTokens.length : undefined}\n              onCurrencySelect={handleCurrencySelect}\n              otherCurrency={otherSelectedCurrency}\n              selectedCurrency={selectedCurrency}\n              fixedListRef={fixedList}\n              showImportView={showImportView}\n              setImportToken={setImportToken}\n            />\n          </Box>\n        ) : (\n          <Column style={{ padding: '20px', height: '100%' }}>\n            <Text color=\"textSubtle\" textAlign=\"center\" mb=\"20px\">\n              {t('No results found.')}\n            </Text>\n          </Column>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default CurrencySearch\n","import React, { useState } from 'react'\nimport { Token, Currency } from '@pancakeswap/sdk'\nimport { Button, Text, ErrorIcon, Flex, Message, Checkbox, Link, Tag, Grid } from '@pancakeswap/uikit'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { useAddUserToken } from 'state/user/hooks'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCombinedInactiveList } from 'state/lists/hooks'\nimport { ListLogo } from 'components/Logo'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  tokens: Token[]\n  handleCurrencySelect?: (currency: Currency) => void\n}\n\nfunction ImportToken({ tokens, handleCurrencySelect }: ImportProps) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [confirmed, setConfirmed] = useState(false)\n\n  const addToken = useAddUserToken()\n\n  // use for showing import source on inactive tokens\n  const inactiveTokenList = useCombinedInactiveList()\n\n  return (\n    <AutoColumn gap=\"lg\">\n      <Message variant=\"warning\">\n        <Text>\n          {t(\n            'Anyone can create a BEP20 token on BSC with any name, including creating fake versions of existing tokens and tokens that claim to represent projects that do not have a token.',\n          )}\n          <br />\n          <br />\n          {t('If you purchase an arbitrary token, you may be unable to sell it back.')}\n        </Text>\n      </Message>\n\n      {tokens.map((token) => {\n        const list = chainId && inactiveTokenList?.[chainId]?.[token.address]?.list\n        const address = token.address\n          ? `${token.address.substring(0, 6)}...${token.address.substring(token.address.length - 4)}`\n          : null\n        return (\n          <Grid key={token.address} gridTemplateRows=\"1fr 1fr 1fr\" gridGap=\"4px\">\n            {list !== undefined ? (\n              <Tag\n                variant=\"success\"\n                outline\n                scale=\"sm\"\n                startIcon={list.logoURI && <ListLogo logoURI={list.logoURI} size=\"12px\" />}\n              >\n                {t('via')} {list.name}\n              </Tag>\n            ) : (\n              <Tag variant=\"failure\" outline scale=\"sm\" startIcon={<ErrorIcon color=\"failure\" />}>\n                {t('Unknown Source')}\n              </Tag>\n            )}\n            <Flex alignItems=\"center\">\n              <Text mr=\"8px\">{token.name}</Text>\n              <Text>({token.symbol})</Text>\n            </Flex>\n            {chainId && (\n              <Flex justifyContent=\"space-between\" width=\"100%\">\n                <Text mr=\"4px\">{address}</Text>\n                <Link href={getBscScanLink(token.address, 'address', chainId)} external>\n                  ({t('View on BscScan')})\n                </Link>\n              </Flex>\n            )}\n          </Grid>\n        )\n      })}\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex alignItems=\"center\" onClick={() => setConfirmed(!confirmed)}>\n          <Checkbox\n            scale=\"sm\"\n            name=\"confirmed\"\n            type=\"checkbox\"\n            checked={confirmed}\n            onChange={() => setConfirmed(!confirmed)}\n          />\n          <Text ml=\"8px\" style={{ userSelect: 'none' }}>\n            {t('I understand')}\n          </Text>\n        </Flex>\n        <Button\n          variant=\"danger\"\n          disabled={!confirmed}\n          onClick={() => {\n            tokens.map((token) => addToken(token))\n            if (handleCurrencySelect) {\n              handleCurrencySelect(tokens[0])\n            }\n          }}\n          className=\".token-dismiss-button\"\n        >\n          {t('Import')}\n        </Button>\n      </Flex>\n    </AutoColumn>\n  )\n}\n\nexport default ImportToken\n","export enum CurrencyModalView {\n  search,\n  manage,\n  importToken,\n  importList,\n}\n\nexport default CurrencyModalView\n","import React, { memo, useCallback, useMemo, useState, useEffect } from 'react'\nimport { Button, Text, CheckmarkIcon, CogIcon, Input, Toggle, LinkExternal, useTooltip } from '@pancakeswap/uikit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { TokenList, Version } from '@uniswap/token-lists'\nimport Card from 'components/Card'\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\nimport { parseENSAddress } from 'utils/ENS/parseENSAddress'\nimport { useTranslation } from 'contexts/Localization'\nimport useFetchListCallback from '../../hooks/useFetchListCallback'\n\nimport { AppDispatch, AppState } from '../../state'\nimport { acceptListUpdate, removeList, disableList, enableList } from '../../state/lists/actions'\nimport { useIsListActive, useAllLists, useActiveListUrls } from '../../state/lists/hooks'\nimport uriToHttp from '../../utils/uriToHttp'\n\nimport Column, { AutoColumn } from '../Layout/Column'\nimport { ListLogo } from '../Logo'\nimport Row, { RowFixed, RowBetween } from '../Layout/Row'\nimport { CurrencyModalView } from './types'\n\nfunction listVersionLabel(version: Version): string {\n  return `v${version.major}.${version.minor}.${version.patch}`\n}\n\nconst Wrapper = styled(Column)`\n  width: 100%;\n  height: 100%;\n`\n\nconst RowWrapper = styled(Row)<{ active: boolean }>`\n  background-color: ${({ active, theme }) => (active ? `${theme.colors.success}19` : 'transparent')};\n  border: solid 1px;\n  border-color: ${({ active, theme }) => (active ? theme.colors.success : theme.colors.tertiary)};\n  transition: 200ms;\n  align-items: center;\n  padding: 1rem;\n  border-radius: 20px;\n`\nconst MToggle = styled(Toggle)`\n  &:hover + :not(:disabled):not(:checked) {\n    box-shadow: 0px 0px 0px 1px #910101, 0px 0px 0px 4px rgb(145 1 1 / 60%) !important;\n  }\n  &:focus + :checked + :not(:disabled) {\n    box-shadow: 0px 0px 0px 1px #910101, 0px 0px 0px 4px rgb(145 1 1 / 60%) !important;\n  }\n  &:focus + :not(:checked):not(:disabled) {\n    box-shadow: 0px 0px 0px 1px #910101, 0px 0px 0px 4px rgb(145 1 1 / 60%) !important;\n  }\n`\n\nfunction listUrlRowHTMLId(listUrl: string) {\n  return `list-row-${listUrl.replace(/\\./g, '-')}`\n}\n\nconst ListRow = memo(function ListRow({ listUrl }: { listUrl: string }) {\n  const listsByUrl = useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\n  const dispatch = useDispatch<AppDispatch>()\n  const { current: list, pendingUpdate: pending } = listsByUrl[listUrl]\n\n  const isActive = useIsListActive(listUrl)\n\n  const { t } = useTranslation()\n\n  const handleAcceptListUpdate = useCallback(() => {\n    if (!pending) return\n    dispatch(acceptListUpdate(listUrl))\n  }, [dispatch, listUrl, pending])\n\n  const handleRemoveList = useCallback(() => {\n    // eslint-disable-next-line no-alert\n    if (window.confirm('Please confirm you would like to remove this list')) {\n      dispatch(removeList(listUrl))\n    }\n  }, [dispatch, listUrl])\n\n  const handleEnableList = useCallback(() => {\n    dispatch(enableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const handleDisableList = useCallback(() => {\n    dispatch(disableList(listUrl))\n  }, [dispatch, listUrl])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <div>\n      <Text>{list && listVersionLabel(list.version)}</Text>\n      <LinkExternal external href={`https://tokenlists.org/token-list?url=${listUrl}`}>\n        {t('See')}\n      </LinkExternal>\n      <Button variant=\"danger\" scale=\"xs\" onClick={handleRemoveList} disabled={Object.keys(listsByUrl).length === 1}>\n        {t('Remove')}\n      </Button>\n      {pending && (\n        <Button variant=\"text\" onClick={handleAcceptListUpdate} style={{ fontSize: '12px' }}>\n          {t('Update list')}\n        </Button>\n      )}\n    </div>,\n    { placement: 'right-end', trigger: 'click' },\n  )\n\n  if (!list) return null\n\n  return (\n    <RowWrapper active={isActive} key={listUrl} id={listUrlRowHTMLId(listUrl)}>\n      {tooltipVisible && tooltip}\n      {list.logoURI ? (\n        <ListLogo size=\"40px\" style={{ marginRight: '1rem' }} logoURI={list.logoURI} alt={`${list.name} list logo`} />\n      ) : (\n        <div style={{ width: '24px', height: '24px', marginRight: '1rem' }} />\n      )}\n      <Column style={{ flex: '1' }}>\n        <Row>\n          <Text bold>{list.name}</Text>\n        </Row>\n        <RowFixed mt=\"4px\">\n          <Text fontSize=\"12px\" mr=\"6px\" textTransform=\"lowercase\">\n            {list.tokens.length} {t('Tokens')}\n          </Text>\n          <span ref={targetRef}>\n            <CogIcon color=\"text\" width=\"12px\" />\n          </span>\n        </RowFixed>\n      </Column>\n      <MToggle\n        checked={isActive}\n        onChange={() => {\n          if (isActive) {\n            handleDisableList()\n          } else {\n            handleEnableList()\n          }\n        }}\n      />\n    </RowWrapper>\n  )\n})\n\nconst ListContainer = styled.div`\n  padding: 1rem 0;\n  height: 100%;\n  overflow: auto;\n`\n\nfunction ManageLists({\n  setModalView,\n  setImportList,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [listUrlInput, setListUrlInput] = useState<string>('')\n\n  const { t } = useTranslation()\n\n  const lists = useAllLists()\n\n  // sort by active but only if not visible\n  const activeListUrls = useActiveListUrls()\n  const [activeCopy, setActiveCopy] = useState<string[] | undefined>()\n  useEffect(() => {\n    if (!activeCopy && activeListUrls) {\n      setActiveCopy(activeListUrls)\n    }\n  }, [activeCopy, activeListUrls])\n\n  const handleInput = useCallback((e) => {\n    setListUrlInput(e.target.value)\n  }, [])\n\n  const fetchList = useFetchListCallback()\n\n  const validUrl: boolean = useMemo(() => {\n    return uriToHttp(listUrlInput).length > 0 || Boolean(parseENSAddress(listUrlInput))\n  }, [listUrlInput])\n\n  const sortedLists = useMemo(() => {\n    const listUrls = Object.keys(lists)\n    return listUrls\n      .filter((listUrl) => {\n        // only show loaded lists, hide unsupported lists\n        return Boolean(lists[listUrl].current) && !UNSUPPORTED_LIST_URLS.includes(listUrl)\n      })\n      .sort((u1, u2) => {\n        const { current: l1 } = lists[u1]\n        const { current: l2 } = lists[u2]\n\n        // first filter on active lists\n        if (activeCopy?.includes(u1) && !activeCopy?.includes(u2)) {\n          return -1\n        }\n        if (!activeCopy?.includes(u1) && activeCopy?.includes(u2)) {\n          return 1\n        }\n\n        if (l1 && l2) {\n          return l1.name.toLowerCase() < l2.name.toLowerCase()\n            ? -1\n            : l1.name.toLowerCase() === l2.name.toLowerCase()\n            ? 0\n            : 1\n        }\n        if (l1) return -1\n        if (l2) return 1\n        return 0\n      })\n  }, [lists, activeCopy])\n\n  // temporary fetched list for import flow\n  const [tempList, setTempList] = useState<TokenList>()\n  const [addError, setAddError] = useState<string | undefined>()\n\n  useEffect(() => {\n    async function fetchTempList() {\n      fetchList(listUrlInput, false)\n        .then((list) => setTempList(list))\n        .catch(() => setAddError('Error importing list'))\n    }\n    // if valid url, fetch details for card\n    if (validUrl) {\n      fetchTempList()\n    } else {\n      setTempList(undefined)\n      if (listUrlInput !== '') {\n        setAddError('Enter valid list location')\n      }\n    }\n\n    // reset error\n    if (listUrlInput === '') {\n      setAddError(undefined)\n    }\n  }, [fetchList, listUrlInput, validUrl])\n\n  // check if list is already imported\n  const isImported = Object.keys(lists).includes(listUrlInput)\n\n  // set list values and have parent modal switch to import list view\n  const handleImport = useCallback(() => {\n    if (!tempList) return\n    setImportList(tempList)\n    setModalView(CurrencyModalView.importList)\n    setListUrl(listUrlInput)\n  }, [listUrlInput, setImportList, setListUrl, setModalView, tempList])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"14px\">\n        <Row>\n          <Input\n            className=\"swap-setting-input\"\n            id=\"list-add-input\"\n            scale=\"lg\"\n            placeholder={t('https:// or ipfs:// or ENS name')}\n            value={listUrlInput}\n            onChange={handleInput}\n          />\n        </Row>\n        {addError ? (\n          <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n            {addError}\n          </Text>\n        ) : null}\n      </AutoColumn>\n      {tempList && (\n        <AutoColumn style={{ paddingTop: 0 }}>\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {tempList.logoURI && <ListLogo logoURI={tempList.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"4px\" style={{ marginLeft: '20px' }}>\n                  <Text bold>{tempList.name}</Text>\n                  <Text color=\"textSubtle\" small textTransform=\"lowercase\">\n                    {tempList.tokens.length} {t('Tokens')}\n                  </Text>\n                </AutoColumn>\n              </RowFixed>\n              {isImported ? (\n                <RowFixed>\n                  <CheckmarkIcon width=\"16px\" mr=\"10px\" />\n                  <Text>{t('Loaded')}</Text>\n                </RowFixed>\n              ) : (\n                <Button width=\"fit-content\" onClick={handleImport}>\n                  {t('Import')}\n                </Button>\n              )}\n            </RowBetween>\n          </Card>\n        </AutoColumn>\n      )}\n      <ListContainer>\n        <AutoColumn gap=\"md\">\n          {sortedLists.map((listUrl) => (\n            <ListRow key={listUrl} listUrl={listUrl} />\n          ))}\n        </AutoColumn>\n      </ListContainer>\n    </Wrapper>\n  )\n}\n\nexport default ManageLists\n","import React, { useRef, RefObject, useCallback, useState, useMemo } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { Text, Button, CloseIcon, IconButton, LinkExternal, Input, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Row, { RowBetween, RowFixed } from 'components/Layout/Row'\nimport { useToken } from 'hooks/Tokens'\nimport { useRemoveUserAddedToken } from 'state/user/hooks'\nimport useUserAddedTokens from 'state/user/hooks/useUserAddedTokens'\nimport { CurrencyLogo } from 'components/Logo'\nimport { getBscScanLink, isAddress } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport Column, { AutoColumn } from '../Layout/Column'\nimport ImportRow from './ImportRow'\nimport { CurrencyModalView } from './types'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: calc(100% - 60px);\n  position: relative;\n  padding-bottom: 60px;\n`\n\nconst Footer = styled.div`\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport default function ManageTokens({\n  setModalView,\n  setImportToken,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n}) {\n  const { chainId } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n\n  // manage focus on modal show\n  const inputRef = useRef<HTMLInputElement>()\n  const handleInput = useCallback((event) => {\n    const input = event.target.value\n    const checksummedInput = isAddress(input)\n    setSearchQuery(checksummedInput || input)\n  }, [])\n\n  // if they input an address, use it\n  const searchToken = useToken(searchQuery)\n\n  // all tokens for local lisr\n  const userAddedTokens: Token[] = useUserAddedTokens()\n  const removeToken = useRemoveUserAddedToken()\n\n  const handleRemoveAll = useCallback(() => {\n    if (chainId && userAddedTokens) {\n      userAddedTokens.map((token) => {\n        return removeToken(chainId, token.address)\n      })\n    }\n  }, [removeToken, userAddedTokens, chainId])\n\n  const tokenList = useMemo(() => {\n    return (\n      chainId &&\n      userAddedTokens.map((token) => (\n        <RowBetween key={token.address} width=\"100%\">\n          <RowFixed>\n            <CurrencyLogo currency={token} size=\"20px\" />\n            <Link external href={getBscScanLink(token.address, 'address', chainId)} color=\"textSubtle\" ml=\"10px\">\n              {token.symbol}\n            </Link>\n          </RowFixed>\n          <RowFixed>\n            <IconButton variant=\"text\" onClick={() => removeToken(chainId, token.address)}>\n              <CloseIcon />\n            </IconButton>\n            <LinkExternal href={getBscScanLink(token.address, 'address', chainId)} />\n          </RowFixed>\n        </RowBetween>\n      ))\n    )\n  }, [userAddedTokens, chainId, removeToken])\n\n  const isAddressValid = searchQuery === '' || isAddress(searchQuery)\n\n  return (\n    <Wrapper>\n      <Column style={{ width: '100%', flex: '1 1' }}>\n        <AutoColumn gap=\"14px\">\n          <Row>\n            <Input\n              className=\"swap-setting-input\"\n              id=\"token-search-input\"\n              scale=\"lg\"\n              placeholder=\"0x0000\"\n              value={searchQuery}\n              autoComplete=\"off\"\n              ref={inputRef as RefObject<HTMLInputElement>}\n              onChange={handleInput}\n              isWarning={!isAddressValid}\n            />\n          </Row>\n          {!isAddressValid && <Text color=\"failure\">{t('Enter valid token address')}</Text>}\n          {searchToken && (\n            <ImportRow\n              token={searchToken}\n              showImportView={() => setModalView(CurrencyModalView.importToken)}\n              setImportToken={setImportToken}\n              style={{ height: 'fit-content' }}\n            />\n          )}\n        </AutoColumn>\n        {tokenList}\n        <Footer>\n          <Text bold color=\"textSubtle\">\n            {userAddedTokens?.length} {userAddedTokens.length === 1 ? t('Custom Token') : t('Custom Tokens')}\n          </Text>\n          {userAddedTokens.length > 0 && (\n            <Button variant=\"tertiary\" onClick={handleRemoveAll}>\n              {t('Clear all')}\n            </Button>\n          )}\n        </Footer>\n      </Column>\n    </Wrapper>\n  )\n}\n","import React, { useState } from 'react'\nimport { Token } from '@pancakeswap/sdk'\nimport { ButtonMenu, ButtonMenuItem, ModalBody } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport ManageLists from './ManageLists'\nimport ManageTokens from './ManageTokens'\nimport { CurrencyModalView } from './types'\n\nconst StyledButtonMenu = styled(ButtonMenu)`\n  width: 100%;\n  // background-color: #f4e6e6;\n`\n\nexport default function Manage({\n  setModalView,\n  setImportList,\n  setImportToken,\n  setListUrl,\n}: {\n  setModalView: (view: CurrencyModalView) => void\n  setImportToken: (token: Token) => void\n  setImportList: (list: TokenList) => void\n  setListUrl: (url: string) => void\n}) {\n  const [showLists, setShowLists] = useState(true)\n\n  const { t } = useTranslation()\n\n  return (\n    <ModalBody>\n      <StyledButtonMenu\n        activeIndex={showLists ? 0 : 1}\n        onItemClick={() => setShowLists((prev) => !prev)}\n        scale=\"sm\"\n        variant=\"primary\"\n        mb=\"32px\"\n      >\n        <ButtonMenuItem width=\"50%\">{t('Lists')}</ButtonMenuItem>\n        <ButtonMenuItem width=\"50%\">{t('Tokens')}</ButtonMenuItem>\n      </StyledButtonMenu>\n      {showLists ? (\n        <ManageLists setModalView={setModalView} setImportList={setImportList} setListUrl={setListUrl} />\n      ) : (\n        <ManageTokens setModalView={setModalView} setImportToken={setImportToken} />\n      )}\n    </ModalBody>\n  )\n}\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, Text, Link, Flex, Checkbox, Message } from '@pancakeswap/uikit'\nimport Card from 'components/Card'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\nimport useTheme from 'hooks/useTheme'\nimport { ListLogo } from 'components/Logo'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from 'state'\nimport useFetchListCallback from 'hooks/useFetchListCallback'\nimport { removeList, enableList } from 'state/lists/actions'\nimport { useAllLists } from 'state/lists/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ImportProps {\n  listURL: string\n  list: TokenList\n  onImport: () => void\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  width: 100%;\n`\n\nconst TextDot = styled.div`\n  height: 3px;\n  width: 3px;\n  background-color: ${({ theme }) => theme.colors.text};\n  border-radius: 50%;\n`\n\nfunction ImportList({ listURL, list, onImport }: ImportProps) {\n  const { theme } = useTheme()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const { t } = useTranslation()\n\n  // user must accept\n  const [confirmed, setConfirmed] = useState(false)\n\n  const lists = useAllLists()\n  const fetchList = useFetchListCallback()\n\n  // monitor is list is loading\n  const adding = Boolean(lists[listURL]?.loadingRequestId)\n  const [addError, setAddError] = useState<string | null>(null)\n\n  const handleAddList = useCallback(() => {\n    if (adding) return\n    setAddError(null)\n    fetchList(listURL)\n      .then(() => {\n        dispatch(enableList(listURL))\n        onImport()\n      })\n      .catch((error) => {\n        setAddError(error.message)\n        dispatch(removeList(listURL))\n      })\n  }, [adding, dispatch, fetchList, listURL, onImport])\n\n  return (\n    <Wrapper>\n      <AutoColumn gap=\"md\">\n        <AutoColumn gap=\"md\">\n          <Card padding=\"12px 20px\">\n            <RowBetween>\n              <RowFixed>\n                {list.logoURI && <ListLogo logoURI={list.logoURI} size=\"40px\" />}\n                <AutoColumn gap=\"sm\" style={{ marginLeft: '20px' }}>\n                  <RowFixed>\n                    <Text bold mr=\"6px\">\n                      {list.name}\n                    </Text>\n                    <TextDot />\n                    <Text small color=\"textSubtle\" ml=\"6px\">\n                      {list.tokens.length} tokens\n                    </Text>\n                  </RowFixed>\n                  <Link\n                    small\n                    external\n                    ellipsis\n                    maxWidth=\"90%\"\n                    href={`https://tokenlists.org/token-list?url=${listURL}`}\n                  >\n                    {listURL}\n                  </Link>\n                </AutoColumn>\n              </RowFixed>\n            </RowBetween>\n          </Card>\n\n          <Message variant=\"danger\">\n            <Flex flexDirection=\"column\">\n              <Text fontSize=\"20px\" textAlign=\"center\" color={theme.colors.failure} mb=\"16px\">\n                {t('Import at your own risk')}\n              </Text>\n              <Text color={theme.colors.failure} mb=\"8px\">\n                {t(\n                  'By adding this list you are implicitly trusting that the data is correct. Anyone can create a list, including creating fake versions of existing lists and lists that claim to represent projects that do not have one.',\n                )}\n              </Text>\n              <Text bold color={theme.colors.failure} mb=\"16px\">\n                {typeof 'If you purchase a token from this list, you may not be able to sell it back.'}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Checkbox\n                  name=\"confirmed\"\n                  type=\"checkbox\"\n                  checked={confirmed}\n                  onChange={() => setConfirmed(!confirmed)}\n                  scale=\"sm\"\n                />\n                <Text ml=\"10px\" style={{ userSelect: 'none' }}>\n                  {t('I understand')}\n                </Text>\n              </Flex>\n            </Flex>\n          </Message>\n\n          <Button disabled={!confirmed} onClick={handleAddList}>\n            {t('Import')}\n          </Button>\n          {addError ? (\n            <Text color=\"failure\" style={{ textOverflow: 'ellipsis', overflow: 'hidden' }}>\n              {addError}\n            </Text>\n          ) : null}\n        </AutoColumn>\n      </AutoColumn>\n    </Wrapper>\n  )\n}\n\nexport default ImportList\n","import React, { useCallback, useState } from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport {\n  ModalContainer,\n  ModalHeader,\n  ModalTitle,\n  ModalBackButton,\n  ModalCloseButton,\n  ModalBody,\n  InjectedModalProps,\n  Heading,\n  Button,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport usePrevious from 'hooks/usePreviousValue'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useTranslation } from 'contexts/Localization'\nimport CurrencySearch from './CurrencySearch'\nimport ImportToken from './ImportToken'\nimport Manage from './Manage'\nimport ImportList from './ImportList'\nimport { CurrencyModalView } from './types'\n\nconst Footer = styled.div`\n  width: 100%;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  text-align: center;\n`\n\nconst StyledModalContainer = styled(ModalContainer)`\n  max-width: 420px;\n  width: 100%;\n`\n\nconst StyledModalBody = styled(ModalBody)`\n  padding: 24px;\n`\n\ninterface CurrencySearchModalProps extends InjectedModalProps {\n  selectedCurrency?: Currency | null\n  onCurrencySelect: (currency: Currency) => void\n  otherSelectedCurrency?: Currency | null\n  showCommonBases?: boolean\n}\n\nexport default function CurrencySearchModal({\n  onDismiss = () => null,\n  onCurrencySelect,\n  selectedCurrency,\n  otherSelectedCurrency,\n  showCommonBases = false,\n}: CurrencySearchModalProps) {\n  const [modalView, setModalView] = useState<CurrencyModalView>(CurrencyModalView.search)\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      onDismiss()\n      onCurrencySelect(currency)\n    },\n    [onDismiss, onCurrencySelect],\n  )\n\n  // for token import view\n  const prevView = usePrevious(modalView)\n\n  // used for import token flow\n  const [importToken, setImportToken] = useState<Token | undefined>()\n\n  // used for import list\n  const [importList, setImportList] = useState<TokenList | undefined>()\n  const [listURL, setListUrl] = useState<string | undefined>()\n\n  const { t } = useTranslation()\n\n  const config = {\n    [CurrencyModalView.search]: { title: t('Select a Token'), onBack: undefined },\n    [CurrencyModalView.manage]: { title: t('Manage'), onBack: () => setModalView(CurrencyModalView.search) },\n    [CurrencyModalView.importToken]: {\n      title: t('Import Tokens'),\n      onBack: () =>\n        setModalView(prevView && prevView !== CurrencyModalView.importToken ? prevView : CurrencyModalView.search),\n    },\n    [CurrencyModalView.importList]: { title: t('Import List'), onBack: () => setModalView(CurrencyModalView.search) },\n  }\n\n  return (\n    <StyledModalContainer minWidth=\"320px\">\n      <ModalHeader>\n        <ModalTitle>\n          {config[modalView].onBack && <ModalBackButton onBack={config[modalView].onBack} />}\n          <Heading>{config[modalView].title}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <StyledModalBody>\n        {modalView === CurrencyModalView.search ? (\n          <CurrencySearch\n            onCurrencySelect={handleCurrencySelect}\n            selectedCurrency={selectedCurrency}\n            otherSelectedCurrency={otherSelectedCurrency}\n            showCommonBases={showCommonBases}\n            showImportView={() => setModalView(CurrencyModalView.importToken)}\n            setImportToken={setImportToken}\n          />\n        ) : modalView === CurrencyModalView.importToken && importToken ? (\n          <ImportToken tokens={[importToken]} handleCurrencySelect={handleCurrencySelect} />\n        ) : modalView === CurrencyModalView.importList && importList && listURL ? (\n          <ImportList list={importList} listURL={listURL} onImport={() => setModalView(CurrencyModalView.manage)} />\n        ) : modalView === CurrencyModalView.manage ? (\n          <Manage\n            setModalView={setModalView}\n            setImportToken={setImportToken}\n            setImportList={setImportList}\n            setListUrl={setListUrl}\n          />\n        ) : (\n          ''\n        )}\n        {modalView === CurrencyModalView.search && (\n          <Footer>\n            <Button\n              scale=\"sm\"\n              variant=\"text\"\n              onClick={() => setModalView(CurrencyModalView.manage)}\n              className=\"list-token-manage-button\"\n            >\n              {t('Manage Tokens')}\n            </Button>\n          </Footer>\n        )}\n      </StyledModalBody>\n    </StyledModalContainer>\n  )\n}\n"],"sourceRoot":""}