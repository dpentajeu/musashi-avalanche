{"version":3,"sources":["views/Referral/LearnMoreModal.tsx","views/Referral/hooks/useClaim.tsx","views/Referral/index.tsx","views/Referral/hooks/useStakingReward.ts","views/Referral/hooks/useCmsContent.ts"],"names":["MModal","styled","div","theme","colors","backgroundDisabled","CmsModal","mediaQueries","md","LearnMoreModal","content","onDismiss","t","useTranslation","useWeb3React","account","useTheme","useToast","TooltipComponent","toastError","toastSuccess","fee","mb","style","fontWeight","useTooltip","placement","tooltipPadding","right","targetRef","tooltip","tooltipVisible","title","headerBackground","alignItems","justifyContent","color","dangerouslySetInnerHTML","__html","onClaim","treasuryContract","amount","fromBlock","toBlock","signature","a","claim","tx","wait","useClaim","useTreasuryContract","useCallback","ReferralWrapper","BodyWrapper","Card","StyledPage","Page","StyledInput","Input","StyledI","i","UplineWrapper","StyledButton","Button","ClaimButton","WelcomeFlex","Flex","MText","Text","withRouter","props","_account","_page","_locale","address","match","params","currentLanguage","library","referralLink","process","useState","isCopied","setIsCopied","isSubmit","setIsSubmit","fastRefresh","useRefresh","baseUrl","lockButton","setLockButton","inAction","setInAction","BigNumber","stakingReward","setStakingReward","handleStakingReward","onStakingReward","axios","get","response","data","handleCmsContent","locale","onCmsContent","page","language","referral","key","cmsContent","setCmsContent","useModal","onLearnMore","useEffect","result","Object","keys","length","getCms","resultBN","toString","isNaN","getUserStakingReward","handleSubmitClick","post","ref_address","then","respData","error","message","refData","is_update","setTimeout","window","location","replace","catch","onClickClaim","action","getSigner","signer","signMessage","JSON","stringify","claimUrl","msg","from_block","to_block","className","type","scale","value","readOnly","text","onCopy","paddingTop","isLoading","endIcon","spin","onClick","disabled","bold","mt","textDecoration","marginTop","flexDirection","token","tokens","musashi","symbol","fontSize","toFixed","width","isLessThanOrEqualTo","ConnectWalletButton"],"mappings":"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","file":"static/js/18.e96e4c4f.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { CmsModal, Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface BountyModalProps {\n  content: string\n  onDismiss?: () => void\n  // TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\nconst MModal = styled(CmsModal)`\n  border: none;\n  max-width: 70vh;\n  max-height: 70vh;\n  \n  h2 {\n    color: white;\n  }\n  svg {\n    fill: white;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 500px;\n  }\n`\n\nconst LearnMoreModal: React.FC<BountyModalProps> = ({ content, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { toastError, toastSuccess } = useToast()\n\n  const TooltipComponent = ({ fee }: { fee: number }) => (\n    <>\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\n      <Text mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto CAKE Pool’s compounding function for everyone.',\n        )}\n      </Text>\n      <Text style={{ fontWeight: 'bold' }}>\n        {t('Auto-Compound Bounty: %fee%% of all Auto CAKE pool users pending yield', { fee: fee / 100 })}\n      </Text>\n    </>\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={11} />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  return (\n    <MModal title={t('Learn More')} onDismiss={onDismiss} headerBackground='#910101'>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <div style={{color: 'black'}} dangerouslySetInnerHTML={{ __html: content}} />\n      </Flex>\n    </MModal>\n  )\n}\n\nexport default LearnMoreModal\n","import { useCallback } from 'react'\nimport { useTreasuryContract } from 'hooks/useContract'\n\nconst onClaim = async (treasuryContract, amount, fromBlock, toBlock, signature) => {\n  const tx = await treasuryContract.claim(amount, fromBlock, toBlock, signature)\n  const receipt = await tx.wait()\n}\n\nconst useClaim = () => {\n  const treasuryContract = useTreasuryContract()\n\n  const handleClaim = useCallback(\n    async (amount, fromBlock, toBlock, signature) => {\n      await onClaim(treasuryContract, amount, fromBlock, toBlock, signature)\n    },\n    [treasuryContract],\n  )\n\n  return { onClaim: handleClaim }\n}\n\nexport default useClaim\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport Page from 'components/Layout/Page'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, Flex, Input, Button, AutoRenewIcon, useModal, Text } from '@pancakeswap/uikit'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport axios from 'axios'\nimport useToast from 'hooks/useToast'\nimport useRefresh from 'hooks/useRefresh'\nimport tokens from 'config/constants/tokens'\nimport LearnMoreModal from \"./LearnMoreModal\"\nimport { useCmsContent } from \"./hooks/useCmsContent\"\nimport { useStakingReward } from './hooks/useStakingReward'\nimport useClaim from './hooks/useClaim'\n\nconst ReferralWrapper = styled.div`\n  background-color: #910101;\n`\n\nconst BodyWrapper = styled(Card)`\n  border-radius: 10px;\n  width: 100%;\n  z-index: 1;\n  box-shadow: none;\n  padding: 30px;\n`\n\nconst StyledPage = styled(Page)`\n  width: 85vh;\n\n  @media only screen and (min-width: 350px) and (max-width: 991px) {\n    width: 100%;\n  }\n`\n\nconst StyledInput = styled(Input)`\n  background-color: #f6f6f6;\n  border: none;\n  color: #0d0d0d;\n  padding: 5px 12px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 5px;\n  width: 85%;\n  border: 1px;\n  border-radius: 5px;\n  position: relative;\n  margin-top: 15px;\n\n  &:focus {\n    box-shadow: 0px 0px 0px 1px #910101, 0px 0px 0px 4px rgb(145 1 1) !important;\n  }\n`\n\nconst StyledI = styled.i`\n  padding-top: 8px;\n  font-size: 30px;\n`\n\nconst UplineWrapper = styled.div`\n  padding-top: 20px;\n`\n\nconst StyledButton = styled(Button)`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 47px;\n  text-align: center;\n  text-transform: uppercase;\n  border-radius: 5px;\n  padding: 30px;\n  width: 200px;\n  height: 40px;\n  background-color: #910101;\n`\nconst ClaimButton = styled(Button)`\n  background-color: #910101;\n  border-radius: 5px;\n  font-size: 25px;\n  max-width: 200px;\n  text-transform: uppercase;\n`\n\nconst WelcomeFlex = styled(Flex)`\n  text-align: center;\n  word-break: break-word;\n`\n\nconst MText = styled(Text)`\n  color: #910101;\n  font-size: 18px;\n  font-weight: bold;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 18px;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`\n\ntype cmsBaseObj = {\n  content: string,\n  language: string,\n  page: string,\n  key: string\n}\n\ntype cmsObj = {\n  banner?: cmsBaseObj,\n  referral?: cmsBaseObj\n}\n\nconst Referral: (props: RouteComponentProps<{ address: string }>) => JSX.Element = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address }\n    },\n  } = props\n  const { t, currentLanguage } = useTranslation()\n  const { account, library } = useWeb3React()\n  const referralLink = `${process.env.REACT_APP_REFERRAL_LINK}${account}`\n  const [isCopied, setIsCopied] = useState(false)\n  const [isSubmit, setIsSubmit] = useState(false)\n  const { fastRefresh } = useRefresh()\n  const { toastSuccess, toastError } = useToast()\n  const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/referral/get-referral-code`\n\n  const [lockButton, setLockButton] = useState(false)\n  const [inAction, setInAction] = useState(false)\n  const [stakingReward, setStakingReward] = useState(new BigNumber(\"0\"))\n  const { onStakingReward: handleStakingReward } = useStakingReward(account)\n  const { onClaim } = useClaim()\n\n  const { onCmsContent: handleCmsContent } = useCmsContent(\"referral\", currentLanguage.locale)\n  const [cmsContent, setCmsContent] = useState(() => {\n    const init: cmsObj = {\n      referral: {\n        content: \"\",\n        language: \"\",\n        page: \"\",\n        key: \"\"\n      }\n    }\n    return init\n  })\n  const [onLearnMore] = useModal(<LearnMoreModal content={cmsContent.referral.content} />)\n\n  useEffect(() => {\n    const getCms = async () => {\n      const result = await handleCmsContent()\n      if (Object.keys(result).length > 0) {\n        setCmsContent(result)\n      }\n    }\n    getCms()\n  }, [handleCmsContent])\n\n  useEffect(() => {\n    const getUserStakingReward = async () => {\n      const result = await handleStakingReward()\n      const resultBN = (result && Object.keys(result).length > 0) ? new BigNumber(result.amount.toString()) : new BigNumber(\"0\")\n      if (resultBN.isNaN() === false) {\n        setStakingReward(resultBN)\n      }\n    }\n    if (account) {\n      getUserStakingReward()\n    }\n  }, [handleStakingReward, fastRefresh, account])\n\n  const onCopyText = () => {\n    setIsCopied(true)\n    setTimeout(() => {\n      setIsCopied(false)\n    }, 1000)\n  }\n\n  const handleSubmitClick = async () => {\n    setIsSubmit(true)\n\n    try {\n      // cal api to add referral\n      await axios.post(baseUrl, {\n        address: account,\n        ref_address: address,\n      }).then((response) => {\n        if (response) {\n          const respData = response.data\n\n          if (respData.error) {\n            setIsSubmit(false)\n            toastError(t('Error'), t(respData.message))\n          }\n\n          const refData = respData.data\n\n          if (refData.is_update) {\n            setIsSubmit(false)\n            toastError(t('Error'), t('Update is prohibited. Please contract support if want to change referral address'))\n          } else if (refData.address && refData.ref_address) {\n            setIsSubmit(false)\n            toastSuccess(t('Success'), t('Referral set successfully.'))\n          }\n\n          setTimeout(() => {\n            window.location.replace('/referral')\n          }, 1000)\n        }\n      }).catch(error => {\n        // console.log('error', error)\n      })\n    } catch (e) {\n      toastError(t('Error'), t('Please try again.'))\n      setIsSubmit(false)\n    }\n  }\n\n  const onClickClaim = async (action = \"referral\") => {\n    setLockButton(true)\n    setInAction(true)\n\n    try {\n      const message = {\n        address: account,\n        action,\n      }\n\n      const signer = await library.getSigner()\n      let signature = \"\"\n      await signer.signMessage(JSON.stringify(message))\n        .then((result) => {\n          signature = result\n        })\n\n      const claimUrl = `${process.env.REACT_APP_DOMAIN_LINK}claim/${account}/${signature}`\n      await axios.get(claimUrl)\n        .then(async (response) => {\n          if (response) {\n            const respData = response.data\n            const refData = respData.data\n\n            if (respData.msg !== 'OK') {\n              toastError(t('Error'), respData.msg)\n              setLockButton(false)\n              setInAction(false)\n            } else {\n              await onClaim(refData.amount, refData.from_block, refData.to_block, refData.signature)\n              toastSuccess(\n                `${t('Claim')}!`,\n                t('Claim reward successfully!'),\n              )\n              setLockButton(false)\n              setInAction(false)\n            }\n          }\n        })\n    } catch (e) {\n      toastError(t('Error'), t('Reward has been claimed or make sure you are paying enough gas!'))\n      setLockButton(false)\n      setInAction(false)\n    }\n  }\n\n  return (\n    <>\n      <ReferralWrapper>\n        <h1 className=\"page-red-header hide-ifMobile\">{t('Referral')}</h1>\n        <StyledPage>\n          <BodyWrapper>\n            {!account ? (\n              <>\n                <Flex justifyContent=\"center\">\n                  <h5>{t('Connect wallet to get your referral link')}</h5>\n                </Flex>\n                <Flex justifyContent=\"center\">\n                  <ConnectWalletButton />\n                </Flex>\n              </>\n            ) : (\n              <>\n                <Flex justifyContent=\"center\">\n                  <h5 className=\"red\">{t('Your Referral Link')}</h5>\n                </Flex>\n                <Flex alignItems=\"center\" justifyContent=\"center\">\n                  <StyledInput type=\"text\" scale=\"md\" value={referralLink} readOnly />\n                  <CopyToClipboard text={referralLink} onCopy={onCopyText}>\n                    <span>{isCopied ? t('Copied!') : <StyledI className='bx bxs-copy' />}</span>\n                  </CopyToClipboard>\n                </Flex>\n                {address ? (\n                  <>\n                    <UplineWrapper>\n                      <WelcomeFlex justifyContent=\"center\">\n                        <span className=\"red\">{t(`Welcome to Musashi, you're referred by `)}{address}</span>\n                      </WelcomeFlex>\n                      <div style={{ paddingTop: '20px' }} />\n                      <Flex alignItems=\"center\" justifyContent=\"center\">\n                        <StyledButton\n                          isLoading={isSubmit}\n                          endIcon={isSubmit ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n                          onClick={handleSubmitClick}\n                          disabled={!address}\n                        >\n                          {isSubmit ? t('Confirming') : t('Join Now')}\n                        </StyledButton>\n                      </Flex>\n                    </UplineWrapper>\n                  </>\n                ) : null}\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  <MText bold color=\"textSubtle\" mt=\"6px\" style={{ textDecoration: \"underline\" }} onClick={onLearnMore}>\n                    {t('Learn more')}\n                  </MText>\n                </Flex>\n                <Flex justifyContent=\"center\" alignItems=\"center\" marginTop=\"2rem\" flexDirection=\"column\">\n                  <h5 className=\"red\">{t('Claim %token% Token', { token: tokens.musashi.symbol })}</h5>\n                  <Text fontSize=\"25px\">{stakingReward.toFixed(4)} {tokens.musashi.symbol}</Text>\n                  {!account ? <ConnectWalletButton mt=\"1rem\" width=\"100%\" />\n                    :\n                    <ClaimButton mt=\"1rem\" width=\"100%\" disabled={lockButton || stakingReward.isLessThanOrEqualTo(new BigNumber(\"0\"))} onClick={() => { onClickClaim() }}>\n                      {inAction ? t('Confirming') : t('Claim')}\n                    </ClaimButton>\n                  }\n                </Flex>\n              </>\n            )}\n          </BodyWrapper>\n        </StyledPage>\n      </ReferralWrapper>\n    </>\n  )\n}\n\nexport default withRouter(Referral)\n","import { useCallback, useEffect, useState } from 'react'\nimport axios from \"axios\"\n\nexport const useStakingReward = (_account: string) => {\n  const handleStakingReward = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/reward/get-staking-reward`\n\n      const response = await axios.get(baseUrl, {\n        params: {\n          address    : _account\n        }\n      })\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_account])\n\n  return { onStakingReward: handleStakingReward }\n}","import { useCallback, useEffect, useState } from 'react'\nimport axios from \"axios\"\n\nexport const useCmsContent = (_page: string, _locale: string) => {\n  const handleCmsContent = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/frontend/get-content`\n\n      const response = await axios.get(baseUrl, {\n        params: {\n          page    : _page,\n          language: _locale\n        }\n      })\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_locale, _page])\n\n  return { onCmsContent: handleCmsContent }\n}"],"sourceRoot":""}