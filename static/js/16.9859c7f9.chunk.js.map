{"version":3,"sources":["views/Pot/components/PotPairCard/StyledCard.tsx","views/Pot/components/PotPairCard/StyledRightCard.tsx","views/Pot/components/PotBanner.tsx","views/Pot/components/PotPairCard/CardFooter/index.tsx","views/Pot/components/PotPairCard/CountdownTimer.tsx","views/Pot/components/PotPairCard/StyledRightCardHeader.tsx","views/Pot/components/LearnMoreModal.tsx","views/Pot/components/PotPairCard/index.tsx","views/Pot/hooks/usePotTotalDeposit.ts","views/Pot/hooks/useUserBalance.ts","views/Pot/components/PotsTable.tsx","views/Pot/components/AnnouncementModal.tsx","views/Pot/index.tsx","views/Pot/hooks/useCmsContent.ts","views/Pot/hooks/useAnnouncementContent.ts"],"names":["PromotedGradient","keyframes","StyledCard","styled","Card","isFinished","theme","colors","isPromoted","css","primaryBright","secondary","props","card","background","isDesktop","mediaQueries","sm","StyledCardInner","Box","radii","StyledRightCard","md","StyledRightCardInner","getImageUrlFromToken","token","address","getAddress","symbol","tokens","wbnb","Avatar","div","isDark","getBackground","img","Banner","Heading","attrs","as","MobileBanner","StyledBannerCard","PotBanner","pot","useTranslation","t","stakingToken","alignItems","src","potBannerPath","width","height","alt","DepositButton","Flex","Button","ViewPDButton","Footer","potAddress","account","potId","isClosed","useState","manualTooltipText","useTooltip","placement","targetRef","tooltip","tooltipVisible","style","borderTop","paddingTop","gap","mt","className","to","Wrapper","MobileWrapper","CountdownTimer","days","hours","minutes","seconds","id","zeroPad","CardHeader","backgroundDisabled","gradients","lg","StyledRightCardHeader","end","restartCounter","isDefault","countdownRef","useRef","current","isStarted","start","borderRadius","justifyContent","flexDirection","date","renderer","ref","MModal","CmsModal","LearnMoreModal","content","onDismiss","useWeb3React","useTheme","useToast","TooltipComponent","toastError","toastSuccess","fee","mb","fontWeight","tooltipPadding","right","title","headerBackground","color","dangerouslySetInnerHTML","__html","BannerWrapper","singleCard","PotPairHeading","NewBadge","span","PotPairTotalDepositHeading","PotPairTotalDepositWrapper","PotPairTotalDepositMobileHeading","PotPrizeHeading","CardAutoColumn","AutoColumn","MText","Text","NewBadgeText","MAutoRow","AutoRow","StyledImg","PotPairCard","totalReward","cmsContent","potLabel","isNew","contract","prizeAmount","expiryDate","useJackpotContract","potData","usePotData","userInfo","setUserInfo","cakeInfo","setCakeInfo","currentLanguage","totalDeposit","totalDepositFormatted","fastRefresh","useRefresh","pancakeChef","useMasterchefSpecial","BigNumber","potTotalDeposit","setPotTotalDeposit","handlePotTotalDeposit","jackpotContract","onPotTotalDeposit","useCallback","a","total_deposit","result","usePotTotalDeposit","potTotalReward","setPotTotalReward","handleUserBalance","tokenContract","onUserBalance","balanceOf","balance","useUserBalance","useERC20Unsigned","useEffect","_userInfo","pendingCake","_pendingCake","amount","potStakingTokenBalanceResult","potStakingTokenBalanceBN","toString","potTotalDepositResult","potTotalDepositBN","isNaN","totalDepositedStake","reward","minus","plus","isPositive","getData","getFullDisplayBalance","toNumber","Date","now","useModal","onLearnMore","justify","p","scale","fontFamily","paddingLeft","textDecoration","onClick","paddingBottom","StyledTable","StyledTableBorder","cardBorder","PotsTable","pots","userDataLoaded","tableWrapperEl","role","map","AnnouncementModal","Pot","_page","_locale","handleCmsContent","locale","onCmsContent","baseUrl","process","axios","get","params","page","language","response","data","banner","key","jackpot","setCmsContent","label","announcementContent","setAnnouncementContent","announcementContentRef","handleAnnouncementContent","onAnnouncementContent","useAnnouncementContent","onAnnouncement","isEmptyRef","isOpenedRef","getCms","Object","keys","length","getAnnouncement","isEmpty","values","every","x","tableLayout","App"],"mappings":"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","file":"static/js/16.9859c7f9.chunk.js","sourcesContent":["import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from '@pancakeswap/uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\n\nexport const StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  max-width: 440px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 3px 10px rgba(25, 19, 38, 0.15);\n  border-radius: 5px;\n  overflow: visible;\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n    min-width: 424px\n  }\n`\n\nexport const StyledCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nexport default StyledCard\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from '@pancakeswap/uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\n\n// max-width: 690px; at line 34\n// box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15) at line 30, 43\nexport const StyledRightCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  max-width: 440px;\n  margin: 0 0px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  border-radius: 5px;\n  background: transparent;\n  box-shadow: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    max-width: 690px;\n    min-width: 690px;\n    margin: 0 8px 24px;\n    display: flex;\n    flex-direction: column;\n    align-self: baseline;\n    position: relative;\n    color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n    border-radius: 5px;\n    background: transparent;\n    box-shadow: none;\n  }\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 15px 12px 16px;\n    max-width: 440px;\n  }\n`\n\nexport const StyledRightCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nexport default StyledRightCard\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Button, Card, CommunityIcon, Flex, Heading, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Token, PotConfig } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface PotBannerProps {\n  pot: PotConfig\n}\n\nconst getBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.svg`\n}\n\nconst TeamRank = styled.div`\n  align-self: stretch;\n  background: ${({ theme }) => getBackground(theme)};\n  flex: none;\n  padding: 16px 0;\n  text-align: center;\n  width: 56px;\n`\n\nconst Body = styled.div`\n  align-items: start;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n    font-size: 40px;\n  }\n`\n// align-items: start;\n// display: flex;\n// flex: 1;\n// flex-direction: column;\n// padding: 24px;\n\nconst Info = styled.div`\n  flex: 1;\n`\n\nconst Avatar = styled.img`\n  border-radius: 50%;\n`\n\nconst TeamName = styled(Heading).attrs({ as: 'h3' })`\n  font-size: 24px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 40px;\n  }\n`\n\nconst MobileAvatar = styled.div`\n  flex: none;\n  margin-left: auto;\n  margin-right:auto;\n\n  ${Avatar} {\n    height: 64px;\n    width: 64px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst MobileVSAvatar = styled.div`\n  flex: none;\n  margin-left: 4px;\n  margin-right: 4px;\n\n  ${Avatar} {\n    height: 70px;\n    width: 70px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst PairAvatar = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n    margin: auto;\n\n    ${Avatar} {\n      height: 100px;\n      width: 100px;\n    }\n  }\n`\n// margin-left: 12px;\n// margin-right: 12px;\n\nconst VersusAvatar = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n    margin-left: 12px;\n    margin-right: 12px;\n\n    ${Avatar} {\n      height: 128px;\n      width: 128px;\n    }\n  }\n`\n\nconst Banner = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n\n    ${Avatar} {\n      height: 128px;\n      width: 128px;\n    }\n  }\n`\n\nconst MobileBanner = styled.div`\n  flex: none;\n  margin-left: auto;\n  margin-right:auto;\n\n  ${Avatar} {\n    height: 64px;\n    width: 64px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst StyledBannerCard = styled(Card)`\n  display: flex;\n  margin-bottom: 16px;\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  width: max-content;\n  border-radius: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`\n// display: flex;\n// margin-bottom: 16px;\n// box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\nconst PotBanner: React.FC<PotBannerProps> = ({ pot }) => {\n  const { t } = useTranslation()\n  const avatar1 = <Avatar src={getImageUrlFromToken(pot.stakingToken)} alt=\"pot avatar 1\" />\n  const avatar2 = <Avatar src={getImageUrlFromToken(pot.stakingToken)} alt=\"pot avatar 2\" />\n  const avatar3 = <Avatar src={getImageUrlFromToken(pot.stakingToken)} alt=\"pot avatar 3\" />\n\n  return (\n    <StyledBannerCard>\n      <Flex alignItems=\"center\">\n        <MobileBanner>\n            <img src={pot.potBannerPath} width=\"300\" height=\"192\" alt=\"\" />\n        </MobileBanner>\n      </Flex>\n      <Flex>\n        <Banner>\n            <img src={pot.potBannerPath} width=\"400\" height=\"192\" alt=\"\" />\n        </Banner>\n      </Flex>\n    </StyledBannerCard>\n  )\n}\n\nexport default PotBanner\n\n// return (\n//   <StyledBannerCard>\n//     <Body>\n//       <Flex alignItems=\"center\" mb=\"16px\">\n//           <MobileAvatar>{avatar1}</MobileAvatar>\n//       </Flex>\n//       <Flex>\n//         <PairAvatar>{avatar1}</PairAvatar>\n//         <VersusAvatar>{avatar2}</VersusAvatar>\n//         <PairAvatar>{avatar3}</PairAvatar>\n//       </Flex>\n//     </Body>\n//   </StyledBannerCard>\n// )\n\n// current change\n// return (\n//   <StyledBannerCard>\n//     <Body>\n//       <Flex alignItems=\"center\">\n//         <MobileAvatar>{avatar1}</MobileAvatar>\n//         <MobileVSAvatar>{avatar2}</MobileVSAvatar>\n//         <MobileAvatar>{avatar3}</MobileAvatar>\n//       </Flex>\n//       <Flex>\n//         <PairAvatar>{avatar1}</PairAvatar>\n//         <VersusAvatar>{avatar2}</VersusAvatar>\n//         <PairAvatar>{avatar3}</PairAvatar>\n//       </Flex>\n//     </Body>\n//   </StyledBannerCard>\n// )","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip, Button, Box } from '@pancakeswap/uikit'\nimport { PotConfig } from 'config/constants/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport Column, { AutoColumn } from '../../../../../components/Layout/Column'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pot: PotConfig\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst DepositButton = styled(Button)`\n  background-color: #910101;\n  border-radius: 5px;\n  font-size: 25px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  height: 100%;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding-top: 0px;\n    padding-bottom: 0px;\n    height: 48px;\n    width: 70%;\n  }\n`\n\nconst ViewPDButton = styled(Button)`\n  background-color: transparent;\n  border-radius: 5px;\n  font-size: 16px;\n  color: #910101;\n  box-shadow: none;\n  font-weight: bold;\n  white-space: normal;\n`\n\nconst Footer: React.FC<FooterProps> = ({ pot, account }) => {\n  const isAutoVault = false\n  const { potId, potAddress, isClosed = false } = pot\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter style={{ borderTop: 'none', paddingTop: '0px' }}>\n      <AutoColumn gap=\"1px\">\n        <Box mt=\"1rem\" className=\"text-center\">\n          <Link to={`/pot/${potAddress}`}>\n            <DepositButton>\n              {isClosed === false? t(`DEPOSIT ${pot.stakingToken.symbol}`) : t('VIEW POOL')}\n            </DepositButton>\n          </Link>\n        </Box>\n        <Box  className=\"text-center\">\n          <Link to={`/pot/${potAddress}`}>\n            <ViewPDButton >\n              {isClosed === false? t('View Pool Distribution') : t('This pool has ended and ready for withdrawal')}\n            </ViewPDButton>\n          </Link>\n        </Box>\n      </AutoColumn>\n    </CardFooter>\n  )\n}\n\nexport default Footer\n\n\n// return (\n//   <CardFooter>\n//     <ExpandableButtonWrapper>\n//       <Flex alignItems=\"center\">\n//         {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n//         {tooltipVisible && tooltip}\n//         <Flex ref={targetRef}>\n//           <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n//         </Flex>\n//       </Flex>\n//       <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n//         {isExpanded ? t('Hide') : t('Details')}\n//       </ExpandableLabel>\n//     </ExpandableButtonWrapper>\n//   </CardFooter>\n// )\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'\nimport Countdown, { zeroPad } from 'react-countdown';\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\nconst MobileWrapper = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\ntype Time = {\n  days   : number,\n  hours  : number,\n  minutes: number,\n  seconds: number\n};\n\nconst CountdownTimer: React.FC<Time> = ({ days, hours, minutes, seconds }) => {\n    // const secStr = zeroPad(seconds)\n    // const secArr = b.split(\"\");\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <div className='tokens-area pb-50'>\n        <div className='container'>\n          <div className='row justify-content-center align-items-center'>\n              <Wrapper className='pot-countdown-content'>\n                <div id='countdown'>\n                  <ul>\n                    <li>\n                      <span id='days' className=\"text-white pot-countdown\">{days}</span><div className=\"text-white text-size-17px\"><strong>{t(\"DAYS\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='hours' className=\"text-white pot-countdown\">{hours}</span><div className=\"text-white text-size-17px\"><strong>{t(\"HR\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='minutes' className=\"text-white pot-countdown\">{minutes}</span><div className=\"text-white text-size-17px\"><strong>{t(\"MIN\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='seconds' className=\"text-white pot-countdown\">{zeroPad(seconds)}</span><div className=\"text-white text-size-17px\"><strong>{t(\"SEC\")}</strong></div>\n                    </li>\n                  </ul>\n                </div>\n              </Wrapper>\n              <MobileWrapper className='mobile-pot-countdown-content'>\n                <div id='countdown'>\n                  <ul>\n                    <li>\n                      <span id='days' className=\"text-white pot-countdown\">{days}</span><div className=\"text-white text-size-17px\"><strong>{t(\"DAYS\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='hours' className=\"text-white pot-countdown\">{hours}</span><div className=\"text-white text-size-17px\"><strong>{t(\"HR\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='minutes' className=\"text-white pot-countdown\">{minutes}</span><div className=\"text-white text-size-17px\"><strong>{t(\"MIN\")}</strong></div>\n                    </li>\n                    <li>\n                      <span id='seconds' className=\"text-white pot-countdown\">{zeroPad(seconds)}</span><div className=\"text-white text-size-17px\"><strong>{t(\"SEC\")}</strong></div>\n                    </li>\n                  </ul>\n                </div>\n              </MobileWrapper>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CountdownTimer;\n","import React, { useRef } from 'react'\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport { Token, PotConfig } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\nimport Countdown from 'react-countdown'\nimport CountdownTimer from './CountdownTimer'\nimport PotBanner from '../PotBanner'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n  margin: auto;\n  padding: 20px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 0px;\n    // max-width: 70%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 0px;\n    max-width: 70%;\n  }\n`\n\n// const PotPairHeading = styled(Heading).attrs({ as: 'h3' })`\n//     font-size: 24px;\n//     text-align: center;\n\n//     ${({ theme }) => theme.mediaQueries.md} {\n//       font-size: 30px;\n//     }\n//   `\n\nconst StyledRightCardHeader: React.FC<{\n  // earningToken: Token\n  // stakingToken: Token\n  // isAutoVault?: boolean\n  // isFinished?: boolean\n  // isStaking?: boolean\n\n  pot: PotConfig\n  end\n  restartCounter\n  isDefault ?: boolean\n}> = ({ pot, end, restartCounter, isDefault = true }) => {\n  const { t } = useTranslation()\n  const background = isDefault ? 'bubblegum' : 'cardHeader'\n  const isFinished = false\n\n  // const getHeadingPrefix = () => {\n  //   if (isAutoVault) {\n  //     // vault\n  //     return t('Auto')\n  //   }\n  //   if (isCakePool) {\n  //     // manual cake\n  //     return t('Manual')\n  //   }\n  //   // all other pools\n  //   return t('Earn')\n  // }\n\n  // const getSubHeading = () => {\n  //   if (isAutoVault) {\n  //     return t('Automatic restaking')\n  //   }\n  //   if (isCakePool) {\n  //     return t('Earn CAKE, stake CAKE')\n  //   }\n  //   return t('Stake %symbol%', { symbol: stakingToken.symbol })\n  // }\n\n  const countdownRef = useRef(null)\n  if (countdownRef.current) {\n    const handleCountdownStart = () => countdownRef.current.start()\n    if (restartCounter === true) {\n      if (countdownRef.current.isStarted() === false) {\n        // console.log('run handleCountdownStart')\n        handleCountdownStart()\n      }\n    }\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background} style={{ background: 'black', borderRadius: '5px' }}>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Flex flexDirection=\"column\">\n          <Countdown date={end} renderer={({ days, hours, minutes, seconds }) => <CountdownTimer\n            days={days}\n            hours={hours}\n            minutes={minutes}\n            seconds={seconds}\n          />} ref={countdownRef} />\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledRightCardHeader\n\n// return (\n//   <Wrapper isFinished={isFinished} background={background} style={{ background: 'black', borderRadius: '5px' }}>\n    \n//     <Flex alignItems=\"center\" justifyContent=\"space-between\">\n//       <Flex flexDirection=\"column\">\n//         <Countdown date={Date.now() + 80000000000} renderer={CountdownTimer} />\n//         <PotPairHeading color='body' scale=\"lg\">\n//           {`${currency1Name} x ${currency2Name}`}\n//         </PotPairHeading>\n//         <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{`$${prizeAmount} PRIZE`}</Text>\n//       </Flex>\n//     </Flex>\n//   </Wrapper>\n// )\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { CmsModal, Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\n\ninterface LearnMoreModalProps {\n  content: string\n  onDismiss?: () => void\n  // TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\nconst MModal = styled(CmsModal)`\n  border: none;\n  max-width: 70vh;\n  max-height: 70vh;\n\n  h2 {\n    color: white;\n  }\n  svg {\n    fill: white;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 500px;\n  }\n`\n\nconst LearnMoreModal: React.FC<LearnMoreModalProps> = ({ content, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { toastError, toastSuccess } = useToast()\n\n  const TooltipComponent = ({ fee }: { fee: number }) => (\n    <>\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\n      <Text mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto CAKE Pool’s compounding function for everyone.',\n        )}\n      </Text>\n      <Text style={{ fontWeight: 'bold' }}>\n        {t('Auto-Compound Bounty: %fee%% of all Auto CAKE pool users pending yield', { fee: fee / 100 })}\n      </Text>\n    </>\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={11} />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  return (\n    <MModal title={t('Learn More')} onDismiss={onDismiss} headerBackground='#910101'>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <div style={{color: 'black'}} dangerouslySetInnerHTML={{ __html: content}} />\n      </Flex>\n    </MModal>\n  )\n}\n\nexport default LearnMoreModal\n","import BigNumber from 'bignumber.js'\nimport React, {useEffect, useState} from 'react'\nimport styled from 'styled-components'\nimport useRefresh from 'hooks/useRefresh'\nimport { CardBody, Flex, Text, CardRibbon, CardHeader, Heading, CardFooter, useModal, Button } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport {getBalanceNumber, getFullDisplayBalance} from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { PotConfig } from '../../../../config/constants/types'\nimport Column, { AutoColumn } from '../../../../components/Layout/Column'\nimport { AutoRow, RowBetween } from '../../../../components/Layout/Row'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport { StyledRightCard, StyledRightCardInner } from './StyledRightCard'\nimport PotBanner from '../PotBanner'\nimport MCardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport StyledRightCardHeader from './StyledRightCardHeader'\nimport {useJackpotContract, useMasterchefSpecial, useERC20, useERC20Unsigned} from \"../../../../hooks/useContract\";\nimport {usePotData} from \"../../../../contexts/PotDetail\";\nimport LearnMoreModal from \"../LearnMoreModal\"\nimport { usePotTotalDeposit } from \"../../hooks/usePotTotalDeposit\"\nimport { useUserBalance } from \"../../hooks/useUserBalance\"\n// import CardActions from './CardActions'\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst Wrapper = styled(CardHeader) <{ isFinished?: boolean; background?: string }>`\n  background: transparent;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n  z-index: 1;\n  margin-bottom: -240px;\n`\nconst BannerWrapper = styled(CardHeader) <{ isFinished?: boolean; background?: string }>`\n  background: transparent;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n  position: relative;\n  transform: translateY(-16px);\n  padding: 0px 24px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 0px;\n  }\n`\nconst PotPairHeading = styled(Heading).attrs({ as: 'h3' })`\n  font-size: 25px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 25px;\n  }\n`\nconst NewBadge = styled.span`\n  transform: translateY(-4px);\n`\nconst PotPairTotalDepositHeading = styled(Heading).attrs({ as: 'h3' })`\n  font-size: 25px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 25px;\n    position: absolute;\n    top: 42%;\n    left: 50%;\n    white-space: nowrap;\n    transform: translate(-50%, -50%);\n  }\n`\nconst PotPairTotalDepositWrapper = styled.div`\n  position: relative;\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n    position: relative;\n  }\n`\nconst PotPairTotalDepositMobileHeading= styled(Heading).attrs({ as: 'h3' })`\n  display: block;\n  font-size: 25px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst PotPrizeHeading = styled(Heading).attrs({ as: 'h1' })`\n  font-size: 28px;\n  text-align: center;\n  color: #910101;\n  margin-bottom: 0px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 33px;\n  }\n`\n\nconst CardAutoColumn = styled(AutoColumn)`\n  margin-left: auto;\n  margin-right: auto;\n`\nconst MText = styled(Text)`\n  color: #910101;\n  font-size: 18px;\n  font-weight: bold;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 18px;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`\nconst NewBadgeText = styled(Text)`\n  color: #FFFFFF;\n  font-size: 18px;\n  font-weight: bold;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 18px;\n  }\n`\nconst LearnMoreButton = styled(Button)`\n  background-color: transparent;\n`\n\nconst MAutoRow = styled(AutoRow)`\n  padding: 40px 2rem;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 20px 2rem;\n    max-width: 1230px\n  }\n`\nconst StyledImg = styled.img`\n  max-width: 100%;\n`\n\nconst PotPairCard: React.FC<{ pot: PotConfig; account: string, cmsContent }> = ({ pot, account, cmsContent }) => {\n  const { potId, potAddress, stakingToken, potLabel, isNew = false, isClosed = false, prizeAmount, expiryDate } = pot\n  const contract = useJackpotContract(potAddress)\n  const potData = usePotData(contract, potAddress)\n  // console.log(potData)\n  const [userInfo, setUserInfo] = useState('')\n  const [cakeInfo, setCakeInfo] = useState('')\n  const { t, currentLanguage } = useTranslation()\n  const {totalDeposit} = potData\n  let {end} = potData\n  let totalReward;\n  let restartCounter = false\n  let totalDepositFormatted = t(\"Loading...\")\n\n  const { fastRefresh } = useRefresh()\n\n  const pancakeChef = useMasterchefSpecial()\n\n  const [potTotalDeposit, setPotTotalDeposit] = useState(new BigNumber(\"0\"))\n  const { onPotTotalDeposit: handlePotTotalDeposit } = usePotTotalDeposit(potAddress)\n  const [potTotalReward, setPotTotalReward] = useState(new BigNumber(\"0\"))\n\n  const tokenContract = useERC20Unsigned(stakingToken.address[56])\n  const { onUserBalance: handleUserBalance } = useUserBalance(tokenContract, potAddress)\n\n  useEffect(() => {\n    const getData = async() => {\n      const _userInfo = await pancakeChef.userInfo(0, potAddress)\n      const _pendingCake = await pancakeChef.pendingCake(0, potAddress)\n      setUserInfo(_userInfo.amount)\n      setCakeInfo(_pendingCake)\n\n      // jackpot staking token balance\n      const potStakingTokenBalanceResult = await handleUserBalance()\n      const potStakingTokenBalanceBN = new BigNumber(potStakingTokenBalanceResult.toString())\n\n      const potTotalDepositResult = await handlePotTotalDeposit()\n      const potTotalDepositBN = new BigNumber(potTotalDepositResult.toString())\n      if (potTotalDepositBN.isNaN() === false) {\n        setPotTotalDeposit(potTotalDepositBN)\n      }\n      const totalDepositedStake = new BigNumber(_userInfo.amount.toString())\n      const reward = new BigNumber(_pendingCake.toString())\n      const result = totalDepositedStake.minus(potTotalDepositBN).plus(reward).plus(potStakingTokenBalanceBN)\n      if (result.isPositive()) {\n        setPotTotalReward(result)\n      }\n    }\n      getData();\n  },[handlePotTotalDeposit, handleUserBalance, pancakeChef, potAddress, fastRefresh])\n\n  if (potTotalDeposit && cakeInfo && userInfo) {\n    totalDepositFormatted = getFullDisplayBalance(potTotalDeposit, 18, 4)\n\n    if (potTotalReward.isPositive() && potTotalReward.isNaN() === false) {\n      totalReward = getFullDisplayBalance(potTotalReward,18,4)\n    }\n  }\n\n  if (!end){\n    end = Date.now()\n  } else {\n    end = end.toNumber() * 1000\n    restartCounter = true\n    // console.log({end})\n  }\n\n  const [onLearnMore] = useModal(<LearnMoreModal content={cmsContent} />)\n\n  return (\n    <MAutoRow justify='center'>\n      <CardAutoColumn justify=\"space-between\">\n        <StyledCard\n        // isFinished={isFinished && potId !== 0}\n        // ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n        >\n          <BannerWrapper>\n            <PotBanner\n              pot={pot}\n            />\n          </BannerWrapper>\n          <StyledCardInner>\n            <CardBody p=\"0px 24px 0px 24px\">\n              <Flex flexDirection=\"column\">\n                <PotPairHeading color='body' scale=\"lg\">\n                  {`${potLabel}`} {isNew === true && <NewBadge className=\"badge bg-danger f-14\"><NewBadgeText fontFamily=\"var(--fontFamily3)\">{t('Live')}</NewBadgeText></NewBadge>}\n                  {isClosed === true && <NewBadge className=\"badge bg-danger f-14\"><NewBadgeText fontFamily=\"var(--fontFamily3)\">{t('Finished')}</NewBadgeText></NewBadge>}\n                </PotPairHeading>\n                <Flex justifyContent=\"center\" alignItems=\"center\" mb=\".5rem\">\n                  <img src=\"/images/trophy.png\" width=\"45.1px\" height=\"45.5px\" alt=\"\" />\n                  <span style={{paddingLeft: \".5rem\"}} />\n                  <PotPrizeHeading color='body' scale=\"lg\">\n                    <span color=\"#910101\">{isClosed === false ? totalReward : \"0.0000\"} { stakingToken.symbol}</span>\n                  </PotPrizeHeading>\n                </Flex>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                    <MText color=\"textSubtle\" mt=\"6px\" style={{textDecoration: \"underline\"}} onClick={onLearnMore}>\n                      {t('Learn more')}\n                    </MText>\n                </Flex>\n              </Flex>\n            </CardBody>\n            <CardFooter style={{ borderTop: '0px', paddingBottom: '5px' }} />\n          </StyledCardInner>\n        </StyledCard>\n      </CardAutoColumn>\n      <CardAutoColumn justify=\"space-between\">\n        <StyledRightCard\n        // isFinished={isFinished && potId !== 0}\n        // ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n        >\n          <StyledRightCardInner style={{ background: 'transparent' }}>\n            <StyledRightCardHeader\n              pot={pot}\n              end={end}\n              restartCounter={restartCounter}\n            // potId={potId}\n            // stakingToken={stakingToken}\n            // potLabel={potLabel}\n            // prizeAmount={prizeAmount}\n            // totalDeposit={totalDeposit}\n            // expiryDate={expiryDate}\n            // isFinished={isFinished && potId !== 0}\n            />\n            <CardBody p=\"24px 24px 0px 24px\">\n              <Flex flexDirection=\"column\">\n                <PotPairTotalDepositWrapper>\n                  <StyledImg src=\"images/total-deposit-holder.png\" alt=\"holder\" />\n                  <PotPairTotalDepositHeading color='white' scale=\"lg\" >\n                    {t(\"TOTAL DEPOSIT\")}: {`${totalDepositFormatted} ${stakingToken.symbol}`}\n                  </PotPairTotalDepositHeading>\n                </PotPairTotalDepositWrapper>\n                <PotPairTotalDepositMobileHeading color='body' scale=\"lg\" >\n                    {t(\"TOTAL DEPOSIT\")}: {`${totalDepositFormatted} ${stakingToken.symbol}`}\n                </PotPairTotalDepositMobileHeading>\n              </Flex>\n            </CardBody>\n            <MCardFooter pot={pot} account={account} />\n          </StyledRightCardInner>\n        </StyledRightCard>\n      </CardAutoColumn>\n    </MAutoRow>\n  )\n}\n\n\nexport default PotPairCard\n\n\n// return (\n//   <CardsWrapper singleCard={false}>\n//         <StyledCard\n//           // isFinished={isFinished && potId !== 0}\n//           // ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n//         >\n//           <StyledCardInner>\n//             <StyledCardHeader\n//               potId={potId}\n//               currency1={currency1}\n//               currency2={currency2}\n//               currency1Name={currency1Name}\n//               currency2Name={currency2Name}\n//               prizeAmount={prizeAmount}\n//               totalDeposit={totalDeposit}\n//               expiryDate={expiryDate}\n//               // isFinished={isFinished && potId !== 0}\n//             />\n//             <CardBody>\n//               <Flex mt=\"24px\" flexDirection=\"column\">\n//                 TODO\n//               </Flex>\n//             </CardBody>\n//             <CardFooter pot={pot} account={account} />\n//           </StyledCardInner>\n//         </StyledCard>\n//         <StyledCard\n//           // isFinished={isFinished && potId !== 0}\n//           // ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n//         >\n//           <StyledCardInner>\n//             <StyledCardHeader\n//               potId={potId}\n//               currency1={currency1}\n//               currency2={currency2}\n//               currency1Name={currency1Name}\n//               currency2Name={currency2Name}\n//               prizeAmount={prizeAmount}\n//               totalDeposit={totalDeposit}\n//               expiryDate={expiryDate}\n//               // isFinished={isFinished && potId !== 0}\n//             />\n//             <CardBody>\n//               <Flex mt=\"24px\" flexDirection=\"column\">\n//                 TODO\n//               </Flex>\n//             </CardBody>\n//             <CardFooter pot={pot} account={account} />\n//           </StyledCardInner>\n//         </StyledCard>\n//   </CardsWrapper>\n// )\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useCakeVaultContract, useJackpotContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nexport const usePotTotalDeposit = (potAddress: string) => {\n  const jackpotContract = useJackpotContract(potAddress)\n\n  const handlePotTotalDeposit = useCallback(async () => {\n    try {\n      // const tx = await tokenContract.approve(jackpotContract.address, ethers.constants.MaxUint256)\n      const result = await jackpotContract.total_deposit()\n      // const receipt = await tx.wait()\n      return result\n\n      // const calls = nonBnbPots.map((p) => ({\n      //   address: getAddress(p.stakingToken.address),\n      //   name: 'balanceOf',\n      //   params: [account],\n      // }))\n      // const tokenBalancesRaw = await multicall(erc20ABI, calls)\n    } catch (e) {\n      return false\n    }\n  }, [jackpotContract])\n\n  return { onPotTotalDeposit: handlePotTotalDeposit }\n}\n\n// uint deposit;\n// uint deposit_timestamp;\n// uint last_claim_block;\n// uint reward_debt;","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useCakeVaultContract, useJackpotContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nexport const useUserBalance = (tokenContract: Contract, account: string) => {\n  const handleUserBalance = useCallback(async () => {\n    try {\n      // const tx = await tokenContract.approve(jackpotContract.address, ethers.constants.MaxUint256)\n      const balance = await tokenContract.balanceOf(account)\n      // const receipt = await tx.wait()\n      return balance\n\n      // const calls = nonBnbPots.map((p) => ({\n      //   address: getAddress(p.stakingToken.address),\n      //   name: 'balanceOf',\n      //   params: [account],\n      // }))\n      // const tokenBalancesRaw = await multicall(erc20ABI, calls)\n    } catch (e) {\n      return false\n    }\n  }, [tokenContract, account])\n\n  return { onUserBalance: handleUserBalance }\n}","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PotConfig } from 'config/constants/types'\n// import PoolRow from './PoolRow'\n\nimport PotsPairCard from './PotPairCard'\nimport PotBanner from './PotBanner'\n\ninterface PotsTableProps {\n  pots: PotConfig[]\n  userDataLoaded: boolean\n  account: string\n  cmsContent: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n  }\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n// border-radius: ${({ theme }) => theme.radii.card};\n\n// background-color: ${({ theme }) => theme.card.background};\n// > div:not(:last-child) {\n//   border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n// }\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  background: url(/images/white-texture.png?v=1);\n  background-size: cover;\n  min-height: 64vh;\n`\n// padding: 1px 1px 3px 1px;\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\nconst StyledCol = styled.div`\n  background-color: transparent;\n  cursor: pointer;\n`\n\nconst PotsTable: React.FC<PotsTableProps> = ({ pots, userDataLoaded, account, cmsContent }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder >\n      <StyledTable role=\"table\" ref={tableWrapperEl} style={{background: 'transparent'}}>\n        {pots.map((pot) => (\n          <PotsPairCard\n            // key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pot={pot}\n            account={account}\n            cmsContent={cmsContent}\n            // userDataLoaded={userDataLoaded}\n          />\n        ))}\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PotsTable\n\n\n// {pots.map((pot) => (\n//   <StyledRow role=\"row\">\n//     <StyledCol role=\"cell\">\n//       <PotBanner\n//         pot={pot}\n//       />\n//     </StyledCol>\n//     <StyledCol role=\"cell\">\n//       <PotBanner\n//         pot={pot}\n//       />\n//     </StyledCol>\n//   </StyledRow>\n// ))}\n","import React, { useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { CmsModal, Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\n\ninterface AnnouncementModalProps {\n  title: string\n  content: string\n  onDismiss?: () => void\n  // TooltipComponent: React.ElementType\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 16px auto;\n  width: 100%;\n`\nconst MModal = styled(CmsModal)`\n  border: none;\n  max-width: 70vh;\n  max-height: 70vh;\n\n  h2 {\n    color: white;\n  }\n  svg {\n    fill: white;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 500px;\n  }\n`\n\nconst AnnouncementModal: React.FC<AnnouncementModalProps> = ({ title, content, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const TooltipComponent = ({ fee }: { fee: number }) => (\n    <>\n      <Text mb=\"16px\">{t('This bounty is given as a reward for providing a service to other users.')}</Text>\n      <Text mb=\"16px\">\n        {t(\n          'Whenever you successfully claim the bounty, you’re also helping out by activating the Auto CAKE Pool’s compounding function for everyone.',\n        )}\n      </Text>\n      <Text style={{ fontWeight: 'bold' }}>\n        {t('Auto-Compound Bounty: %fee%% of all Auto CAKE pool users pending yield', { fee: fee / 100 })}\n      </Text>\n    </>\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent fee={11} />, {\n    placement: 'bottom',\n    tooltipPadding: { right: 15 },\n  })\n\n  return (\n    <MModal title={t('Announcement')} onDismiss={onDismiss} headerBackground='#910101'>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" flexDirection=\"column\">\n        <h5>{t(title)}</h5>\n        <div style={{color: 'black'}} dangerouslySetInnerHTML={{ __html: content}} />\n      </Flex>\n    </MModal>\n  )\n}\n\nexport default AnnouncementModal\n","import React, { useEffect, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { AppBody } from 'components/App'\nimport FlexLayout from 'components/Layout/Flex'\nimport PotPairCard from './components/PotPairCard'\nimport PotsTable from './components/PotsTable'\nimport pots from '../../config/constants/pots'\nimport { useCmsContent } from \"./hooks/useCmsContent\"\nimport { useAnnouncementContent } from \"./hooks/useAnnouncementContent\"\nimport AnnouncementModal from \"./components/AnnouncementModal\"\n\ninterface BannerProps {\n  content: string\n}\n// interface AnnouncementProps {\n//   title: string\n//   content: string\n// }\n\ntype announcementObj = {\n  label: string,\n  content: string,\n  language: string,\n}\n\n// const AnnouncementWrapper = styled.div`\n//   background: #000000;\n//   padding: 15px;\n// `\n\nconst Banner: React.FC<BannerProps> = ({ content }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <div className='banner-wrapper-area hide-ifMobile'>\n        <div className='container'>\n          <div className='row align-items-center m-0'>\n            <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-content'>\n                <h3>{t(\"NO LOSS JACKPOT POOL FOR MUSASHI AND CAKE LOVER\")}</h3>\n                <div className='banner-wrapper-content' dangerouslySetInnerHTML={{ __html: content }} />\n              </div>\n            </div>\n            <div className='col-xl-4 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-image'>\n                <img src='/images/decor-img.png' alt='banner' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\n// const AnnouncementSection: React.FC<AnnouncementProps> = ({ title, content }) => {\n//   const { t } = useTranslation()\n\n//   return (\n//     <>\n//       <AnnouncementWrapper>\n//         <div className='container'>\n//           <div className='row align-items-center m-0'>\n//             <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n//               <div className='banner-wrapper-content'>\n//                 <h5>{t(title)}</h5>\n//                 <div className='banner-wrapper-content' dangerouslySetInnerHTML={{ __html: content }} />\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </AnnouncementWrapper>\n//     </>\n//   )\n// }\n\n// CMS interface\ntype cmsBaseObj = {\n  content: string,\n  language: string,\n  page: string,\n  key: string\n}\ntype cmsObj = {\n  banner?: cmsBaseObj,\n  jackpot?: cmsBaseObj\n}\n\nconst Pot: React.FC = () => {\n  const { t, currentLanguage } = useTranslation()\n  const { account } = useWeb3React()\n\n  // cms content\n  const { onCmsContent: handleCmsContent } = useCmsContent(\"jackpot\", currentLanguage.locale)\n  const [cmsContent, setCmsContent] = useState(() => {\n    const init: cmsObj = {\n      banner: {\n        content: \"\",\n        language: \"\",\n        page: \"\",\n        key: \"\"\n      },\n      jackpot: {\n        content: \"\",\n        language: \"\",\n        page: \"\",\n        key: \"\"\n      }\n    }\n    return init\n  })\n  const [announcementContent, setAnnouncementContent] = useState(() => {\n    const init: announcementObj = {\n      label: \"\",\n      content: \"\",\n      language: \"\"\n    }\n    return init\n  })\n  const announcementContentRef = useRef(announcementContent)\n  const { onAnnouncementContent: handleAnnouncementContent } = useAnnouncementContent(currentLanguage.locale)\n  const [onAnnouncement] = useModal(<AnnouncementModal title={announcementContent.label} content={announcementContent.content} />, true, true, 'announcement')\n  const isEmptyRef = useRef(true)\n  const isOpenedRef = useRef(false)\n\n  useEffect(() => {\n    const getCms = async () => {\n      const result = await handleCmsContent()\n      if (Object.keys(result).length > 0) {\n        setCmsContent(result)\n      }\n    }\n    const getAnnouncement = async () => {\n      const result = await handleAnnouncementContent()\n      // const isEmpty = Object.values(object).every(x => (x === null || x === ''));\n      if (Object.keys(result).length > 0) {\n        setAnnouncementContent(result)\n        announcementContentRef.current = result\n      }\n      const isEmpty = Object.values(announcementContentRef.current).every(x => (x === null || x === ''));\n      isEmptyRef.current = isEmpty\n    }\n    getCms()\n    getAnnouncement()\n  }, [handleAnnouncementContent, handleCmsContent])\n\n  if (isEmptyRef.current === false && isOpenedRef.current === false) {\n    onAnnouncement()\n    isOpenedRef.current = true\n  }\n\n  // const CardLayout = styled(FlexLayout)`\n  //   justify-content: center;\n  // `\n\n  const tableLayout = <PotsTable pots={pots} account={account} userDataLoaded={false} cmsContent={cmsContent.jackpot.content} />\n\n  // card\n  // const cardLayout = (\n  //   <CardLayout>\n  //     {pots.map((pot) =>\n  //       <PotPairCard key={pot.potId} pot={pot} account={account} cmsContent={cmsContent.jackpot.content} />\n  //     )}\n  //   </CardLayout>\n  // )\n\n  return (\n    <>\n      <Banner content={cmsContent.banner.content} />\n      <AppBody>\n        {tableLayout}\n      </AppBody>\n    </>\n  )\n}\n\nexport default Pot\n","import { useCallback, useEffect, useState } from 'react'\nimport axios from \"axios\"\n\nexport const useCmsContent = (_page: string, _locale: string) => {\n  const handleCmsContent = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/frontend/get-content`\n\n      const response = await axios.get(baseUrl, {\n        params: {\n          page    : _page,\n          language: _locale\n        }\n      })\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_locale, _page])\n\n  return { onCmsContent: handleCmsContent }\n}","import { useCallback } from 'react'\nimport axios from \"axios\"\n\nexport const useAnnouncementContent = (_locale: string) => {\n  const handleAnnouncementContent = useCallback(async () => {\n    try {\n      const baseUrl = `${process.env.REACT_APP_MUSASHIBO_LINK}/api/frontend/get-announcement`\n\n      const response = await axios.get(baseUrl, {\n        params: {\n          language: _locale\n        }\n      })\n\n      const {data} = await response?.data\n      return data\n    } catch (e) {\n      return {}\n    }\n  }, [_locale])\n\n  return { onAnnouncementContent: handleAnnouncementContent }\n}"],"sourceRoot":""}