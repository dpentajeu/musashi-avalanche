{"version":3,"sources":["components/UnsupportedCurrencyFooter.tsx","state/mint/hooks.ts","views/AddLiquidity/ConfirmAddModalBottom.tsx","views/AddLiquidity/PoolPriceBar.tsx","views/AddLiquidity/index.tsx","utils/maxAmountSpend.ts"],"names":["DetailsFooter","styled","div","theme","colors","text","invertedContrast","UnsupportedModal","currencies","onDismiss","chainId","useActiveWeb3React","tokens","map","currency","wrappedCurrency","unsupportedTokens","useUnsupportedTokens","title","maxWidth","gap","token","Object","keys","includes","address","align","size","symbol","external","small","color","href","getBscScanLink","concat","UnsupportedCurrencyFooter","useModal","onPresentModal","variant","onClick","ZERO","JSBI","BigInt","useMintState","useSelector","state","mint","ConfirmAddModalBottom","noLiquidity","price","parsedAmounts","poolTokenPercentage","onAdd","t","useTranslation","Row","asset","Field","CURRENCY_A","style","marginRight","toSignificant","CURRENCY_B","justifyContent","invert","mt","PoolPriceBar","justify","fontSize","pt","assetA","assetB","lessThan","ONE_BIPS","toFixed","AddLiquidity","match","params","currencyIdA","currencyIdB","history","account","library","currencyA","useCurrency","currencyB","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","expertMode","useIsExpertMode","independentField","typedValue","otherTypedValue","error","dependentField","useMemo","undefined","usePair","pairState","pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","equal","raw","balances","useCurrencyBalances","currencyBalances","independentAmount","tryParseAmount","dependentAmount","wrappedIndependentAmount","wrappedCurrencyAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ETHER","CurrencyAmount","ether","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","Percent","add","INVALID","useDerivedMintInfo","dispatch","useDispatch","onFieldAInput","useCallback","typeInput","field","onFieldBInput","useMintActionHandlers","isValid","useState","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","useApproveCallback","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","a","router","getRouterContract","parsedAmountA","parsedAmountB","calculateSlippageAmount","amountsMin","tokenBIsETH","estimate","estimateGas","addLiquidityETH","method","args","toString","toHexString","value","BigNumber","from","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","summary","hash","catch","err","code","console","modalHeader","alignItems","currency0","currency1","textAlign","my","slippage","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","push","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","TransactionConfirmationModal","customOnDismiss","content","topContent","bottomContent","currencyToAdd","onPresentAddLiquidityModal","Page","App","subtitle","helper","backTo","Column","bold","mb","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","width","padding","borderRadius","disabled","ApprovalState","NOT_APPROVED","PENDING","APPROVED","Dots","ConnectWalletButton","minWidth","marginTop","showUnwrapped","currencyAmount","greaterThan","MIN_BNB","subtract"],"mappings":"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","file":"static/js/13.1bd7f696.chunk.js","sourcesContent":["import React from 'react'\nimport { Currency, Token } from '@pancakeswap/sdk'\nimport { Button, Text, Modal, useModal, InjectedModalProps, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { AutoRow } from 'components/Layout/Row'\nimport { AutoColumn } from 'components/Layout/Column'\nimport { CurrencyLogo } from 'components/Logo'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useUnsupportedTokens } from '../hooks/Tokens'\n\ninterface Props extends InjectedModalProps {\n  currencies: (Currency | undefined)[]\n}\n\nconst DetailsFooter = styled.div`\n  padding: 8px 0;\n  width: 100%;\n  max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  color: ${({ theme }) => theme.colors.text};\n  background-color: ${({ theme }) => theme.colors.invertedContrast};\n  text-align: center;\n`\n\nconst UnsupportedModal: React.FC<Props> = ({ currencies, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return wrappedCurrency(currency, chainId)\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <Modal title=\"Unsupported Assets\" maxWidth=\"420px\" onDismiss={onDismiss}>\n      <AutoColumn gap=\"lg\">\n        {tokens.map((token) => {\n          return (\n            token &&\n            unsupportedTokens &&\n            Object.keys(unsupportedTokens).includes(token.address) && (\n              <AutoColumn key={token.address?.concat('not-supported')} gap=\"10px\">\n                <AutoRow gap=\"5px\" align=\"center\">\n                  <CurrencyLogo currency={token} size=\"24px\" />\n                  <Text>{token.symbol}</Text>\n                </AutoRow>\n                {chainId && (\n                  <Link external small color=\"primaryDark\" href={getBscScanLink(token.address, 'address', chainId)}>\n                    {token.address}\n                  </Link>\n                )}\n              </AutoColumn>\n            )\n          )\n        })}\n        <AutoColumn gap=\"lg\">\n          <Text>\n            Some assets are not available through this interface because they may not work well with our smart contract\n            or we are unable to allow trading for legal reasons.\n          </Text>\n        </AutoColumn>\n      </AutoColumn>\n    </Modal>\n  )\n}\n\nexport default function UnsupportedCurrencyFooter({ currencies }: { currencies: (Currency | undefined)[] }) {\n  const [onPresentModal] = useModal(<UnsupportedModal currencies={currencies} />)\n\n  return (\n    <DetailsFooter>\n      <Button variant=\"text\" onClick={onPresentModal}>\n        Read more about unsupported assets\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { wrappedCurrency, wrappedCurrencyAmount } from 'utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId),\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    }\n    return undefined\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? 'Invalid pair'\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = `Insufficient ${currencies[Field.CURRENCY_A]?.symbol} balance`\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = `Insufficient ${currencies[Field.CURRENCY_B]?.symbol} balance`\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { Field } from '../../state/mint/actions'\n\nfunction ConfirmAddModalBottom({\n  noLiquidity,\n  price,\n  currencies,\n  parsedAmounts,\n  poolTokenPercentage,\n  onAdd,\n}: {\n  noLiquidity?: boolean\n  price?: Fraction\n  currencies: { [field in Field]?: Currency }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  poolTokenPercentage?: Percent\n  onAdd: () => void\n}) {\n  const { t } = useTranslation()\n  return (\n    <>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Rates')}</Text>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\n            currencies[Field.CURRENCY_B]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\n        <Text>\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\n            currencies[Field.CURRENCY_A]?.symbol\n          }`}\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <Text>{t('Share of Pool')}:</Text>\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\n      </RowBetween>\n      <Button onClick={onAdd} mt=\"20px\">\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\n      </Button>\n    </>\n  )\n}\n\nexport default ConfirmAddModalBottom\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\nimport React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn } from '../../components/Layout/Column'\nimport { AutoRow } from '../../components/Layout/Row'\nimport { ONE_BIPS } from '../../config/constants'\nimport { Field } from '../../state/mint/actions'\n\nfunction PoolPriceBar({\n  currencies,\n  noLiquidity,\n  poolTokenPercentage,\n  price,\n}: {\n  currencies: { [field in Field]?: Currency }\n  noLiquidity?: boolean\n  poolTokenPercentage?: Percent\n  price?: Price\n}) {\n  const { t } = useTranslation()\n  return (\n    <AutoColumn gap=\"md\">\n      <AutoRow justify=\"space-around\" gap=\"4px\">\n        <AutoColumn justify=\"center\">\n          <Text>{price?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>{price?.invert()?.toSignificant(6) ?? '-'}</Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('%assetA% per %assetB%', {\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n            })}\n          </Text>\n        </AutoColumn>\n        <AutoColumn justify=\"center\">\n          <Text>\n            {noLiquidity && price\n              ? '100'\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\n            %\n          </Text>\n          <Text fontSize=\"14px\" pt={1}>\n            {t('Share of Pool')}\n          </Text>\n        </AutoColumn>\n      </AutoRow>\n    </AutoColumn>\n  )\n}\n\nexport default PoolPriceBar\n","import React, { useCallback, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal } from '@pancakeswap/uikit'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport { useTranslation } from 'contexts/Localization'\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { DoubleCurrencyLogo } from '../../components/Logo'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row, { RowBetween } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\n\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport { PairState } from '../../hooks/usePairs'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { Field } from '../../state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport Dots from '../../components/Loader/Dots'\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom'\nimport { currencyId } from '../../utils/currencyId'\nimport PoolPriceBar from './PoolPriceBar'\nimport Page from '../Page'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\n  )\n\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const deadline = useTransactionDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {},\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {},\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsETH = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ]\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        }),\n      )\n      .catch((err) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (err?.code !== 4001) {\n          console.error(err)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"48px\" marginRight=\"10px\">\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n        </Text>\n        <DoubleCurrencyLogo\n          currency0={currencies[Field.CURRENCY_A]}\n          currency1={currencies[Field.CURRENCY_B]}\n          size={30}\n        />\n      </Flex>\n    ) : (\n      <AutoColumn>\n        <Flex alignItems=\"center\">\n          <Text fontSize=\"48px\" marginRight=\"10px\">\n            {liquidityMinted?.toSignificant(6)}\n          </Text>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </Flex>\n        <Row>\n          <Text fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </Text>\n        </Row>\n        <Text small textAlign=\"left\" my=\"24px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\n  })\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA_: Currency) => {\n      const newCurrencyIdA = currencyId(currencyA_)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA],\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currencyB_: Currency) => {\n      const newCurrencyIdB = currencyId(currencyB_)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\n\n  const [onPresentAddLiquidityModal] = useModal(\n    <TransactionConfirmationModal\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n      currencyToAdd={pair?.liquidityToken}\n    />,\n    true,\n    true,\n    'addLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          title={t('Add Liquidity')}\n          subtitle={t('Add liquidity to receive LP tokens')}\n          helper={t(\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\n          )}\n          backTo=\"/pool\"\n        />\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            {noLiquidity && (\n              <ColumnCenter>\n                <Message variant=\"warning\">\n                  <div>\n                    <Text bold mb=\"8px\">\n                      {t('You are the first liquidity provider.')}\n                    </Text>\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\n                  </div>\n                </Message>\n              </ColumnCenter>\n            )}\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_A]}\n              onUserInput={onFieldAInput}\n              onMax={() => {\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n              }}\n              onCurrencySelect={handleCurrencyASelect}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n              currency={currencies[Field.CURRENCY_A]}\n              id=\"add-liquidity-input-tokena\"\n              showCommonBases\n            />\n            <ColumnCenter>\n              <AddIcon width=\"16px\" />\n            </ColumnCenter>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.CURRENCY_B]}\n              onUserInput={onFieldBInput}\n              onCurrencySelect={handleCurrencyBSelect}\n              onMax={() => {\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n              }}\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n              currency={currencies[Field.CURRENCY_B]}\n              id=\"add-liquidity-input-tokenb\"\n              showCommonBases\n            />\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n              <>\n                <LightCard padding=\"0px\" borderRadius=\"20px\">\n                  <RowBetween padding=\"1rem\">\n                    <Text fontSize=\"14px\">\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\n                    </Text>\n                  </RowBetween>{' '}\n                  <LightCard padding=\"1rem\" borderRadius=\"20px\">\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </LightCard>\n                </LightCard>\n              </>\n            )}\n\n            {addIsUnsupported ? (\n              <Button disabled mb=\"4px\">\n                {t('Unsupported Asset')}\n              </Button>\n            ) : !account ? (\n              <ConnectWalletButton />\n            ) : (\n              <AutoColumn gap=\"md\">\n                {(approvalA === ApprovalState.NOT_APPROVED ||\n                  approvalA === ApprovalState.PENDING ||\n                  approvalB === ApprovalState.NOT_APPROVED ||\n                  approvalB === ApprovalState.PENDING) &&\n                  isValid && (\n                    <RowBetween>\n                      {approvalA !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveACallback}\n                          disabled={approvalA === ApprovalState.PENDING}\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalA === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                      {approvalB !== ApprovalState.APPROVED && (\n                        <Button\n                          onClick={approveBCallback}\n                          disabled={approvalB === ApprovalState.PENDING}\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                        >\n                          {approvalB === ApprovalState.PENDING ? (\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\n                          ) : (\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\n                          )}\n                        </Button>\n                      )}\n                    </RowBetween>\n                  )}\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    if (expertMode) {\n                      onAdd()\n                    } else {\n                      onPresentAddLiquidityModal()\n                    }\n                  }}\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\n                >\n                  {error ?? t('Supply')}\n                </Button>\n              </AutoColumn>\n            )}\n          </AutoColumn>\n        </CardBody>\n      </AppBody>\n      {!addIsUnsupported ? (\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n          </AutoColumn>\n        ) : null\n      ) : (\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\n      )}\n    </Page>\n  )\n}\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\nimport { MIN_BNB } from '../config/constants'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\n    }\n    return CurrencyAmount.ether(JSBI.BigInt(0))\n  }\n  return currencyAmount\n}\n\nexport default maxAmountSpend\n"],"sourceRoot":""}