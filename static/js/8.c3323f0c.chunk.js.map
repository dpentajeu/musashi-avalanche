{"version":3,"sources":["views/Pool/index.tsx","components/Logo/DoubleLogo.tsx","components/Logo/ListLogo.tsx","components/Logo/NetworkLogo.tsx","state/wallet/hooks.ts","utils/getTokenLogoURL.ts","components/Logo/CurrencyLogo.tsx","components/Card/index.tsx","components/Loader/Dots.tsx","utils/currencyId.ts","utils/isZero.ts","components/Logo/Logo.tsx","hooks/useTotalSupply.ts","components/PositionCard/index.tsx","views/Page.tsx","hooks/useHttpLocations.ts","hooks/ENS/useENSContentHash.ts"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","variant","scale","as","Link","to","style","width","startIcon","Wrapper","div","margin","DoubleCurrencyLogo","currency0","currency1","size","CurrencyLogo","currency","toString","marginRight","StyledListLogo","Logo","ListLogo","logoURI","alt","srcs","useHttpLocations","StyledLogo","NetworkLogo","network","name","imgLink","symbol","validatedTokens","isAddress","validatedTokenAddresses","vt","balances","useMultipleContractSingleData","ERC20_INTERFACE","anyLoading","callState","loading","reduce","memo","token","i","value","result","amount","JSBI","BigInt","TokenAmount","useTokenBalances","useTokenBalance","tokenBalances","useCurrencyBalances","currencies","Token","ethBalance","uncheckedAddresses","multicallContract","useMulticallContract","addresses","a","sort","results","useSingleContractMultipleData","CurrencyAmount","ether","useBNBBalances","ETHER","useCurrencyBalance","useAllTokenBalances","useWeb3React","allTokens","useAllTokens","Object","values","getTokenLogoURL","uriLocations","WrappedTokenInfo","Card","Box","padding","border","borderRadius","background","LightCard","backgroundAlt","LightGreyCard","cardBorder","dropdown","Dots","span","currencyId","Error","isZero","hexNumberString","test","BAD_SRCS","rest","useState","refresh","src","find","s","onError","useTotalSupply","contract","useTokenContract","totalSupply","useSingleCallResult","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","token0","unwrappedToken","token1","showMore","setShowMore","userPoolBalance","totalPoolTokens","poolTokenPercentage","greaterThanOrEqual","raw","Percent","getLiquidityValue","token0Deposited","token1Deposited","gap","bold","onClick","small","toSignificant","toFixed","asset","ml","fontSize","role","FullPositionCard","props","justifyContent","p","BIG_INT_ZERO","SwapWrapper","Page","children","className","uri","ens","parseENSAddress","resolvedContentHash","ensName","ensNodeArgument","namehash","error","registrarContract","useENSRegistrarContract","resolverAddressResult","resolverAddress","resolverContract","useENSResolverContract","contenthash","useENSContentHash","uriToHttp","contenthashToUri"],"mappings":"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","file":"static/js/8.c3323f0c.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nconst Body = styled(CardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\n\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n    </Page>\n  )\n}\n","import { Currency } from '@pancakeswap/sdk'\nimport React from 'react'\nimport styled from 'styled-components'\nimport CurrencyLogo from './CurrencyLogo'\n\nconst Wrapper = styled.div<{ margin: boolean }>`\n  display: flex;\n  flex-direction: row;\n  margin-right: ${({ margin }) => margin && '4px'};\n`\n\ninterface DoubleCurrencyLogoProps {\n  margin?: boolean\n  size?: number\n  currency0?: Currency\n  currency1?: Currency\n}\n\nexport default function DoubleCurrencyLogo({\n  currency0,\n  currency1,\n  size = 20,\n  margin = false,\n}: DoubleCurrencyLogoProps) {\n  return (\n    <Wrapper margin={margin}>\n      {currency0 && <CurrencyLogo currency={currency0} size={`${size.toString()}px`} style={{ marginRight: '4px' }} />}\n      {currency1 && <CurrencyLogo currency={currency1} size={`${size.toString()}px`} />}\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport Logo from './Logo'\n\nconst StyledListLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function ListLogo({\n  logoURI,\n  style,\n  size = '24px',\n  alt,\n}: {\n  logoURI: string\n  size?: string\n  style?: React.CSSProperties\n  alt?: string\n}) {\n  const srcs: string[] = useHttpLocations(logoURI)\n\n  return <StyledListLogo alt={alt} size={size} srcs={srcs} style={style} />\n}\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { BinanceIcon } from '@pancakeswap/uikit'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport getTokenLogoURL from '../../utils/getTokenLogoURL'\nimport Logo from './Logo'\n\nconst StyledLogo = styled(Logo) <{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\ninterface networkProps {\n  name: string\n  symbol: string\n  imgLink: string\n  projectLink: string\n}\n\nexport default function NetworkLogo({\n  network,\n  size = '24px',\n  style,\n}: {\n  network?: networkProps\n  size?: string\n  style?: React.CSSProperties\n}) {\n\n  if (network.name === \"bsc\") {\n    return <BinanceIcon width={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={[network.imgLink]} alt={`${network?.symbol ?? 'network'} logo`} style={style} />\n}\n","import { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ERC20_INTERFACE from 'config/abi/erc20'\nimport { useAllTokens, useAllZapTokens } from 'hooks/Tokens'\nimport { useMulticallContract } from 'hooks/useContract'\nimport { isAddress } from 'utils'\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks'\n\n/**\n * Returns a map of the given addresses to their eventually consistent BNB balances.\n */\nexport function useBNBBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount | undefined\n} {\n  const multicallContract = useMulticallContract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n          .map(isAddress)\n          .filter((a): a is string => a !== false)\n          .sort()\n        : [],\n    [uncheckedAddresses],\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map((address) => [address]),\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, results],\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens],\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address])\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = new TokenAmount(token, amount)\n            }\n            return memo\n          }, {})\n          : {},\n      [address, validatedTokens, balances],\n    ),\n    anyLoading,\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[],\n): { [tokenAddress: string]: TokenAmount | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[],\n): (CurrencyAmount | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [],\n    [currencies],\n  )\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsBNB: boolean = useMemo(() => currencies?.some((currency) => currency === ETHER) ?? false, [currencies])\n  const ethBalance = useBNBBalances(containsBNB ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency) return undefined\n        if (currency instanceof Token) return tokenBalances[currency.address]\n        if (currency === ETHER) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances],\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\nexport function useAllZapTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\n  const { account } = useWeb3React()\n  const allZapTokens = useAllZapTokens()\n  const allZapTokensArray = useMemo(() => Object.values(allZapTokens ?? {}), [allZapTokens])\n  const balances = useTokenBalances(account ?? undefined, allZapTokensArray)\n  return balances ?? {}\n}\n","const getTokenLogoURL = (address: string) =>\n  `/images/tokens/${address}.svg`\n// `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${address}/logo.png`\n\nexport default getTokenLogoURL\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\nimport { BinanceIcon } from '@pancakeswap/uikit'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport getTokenLogoURL from '../../utils/getTokenLogoURL'\nimport Logo from './Logo'\n\nconst StyledLogo = styled(Logo) <{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)]\n      }\n      return [getTokenLogoURL(currency.address)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency === ETHER) {\n    return <BinanceIcon width={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n","import styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\n\nconst Card = styled(Box)<{\n  width?: string\n  padding?: string\n  border?: string\n  borderRadius?: string\n}>`\n  width: ${({ width }) => width ?? '100%'};\n  border-radius: 16px;\n  padding: 1.25rem;\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n  background-color: ${({ theme }) => theme.colors.background};\n`\nexport default Card\n\nexport const LightCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.colors.background};\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nexport const LightGreyCard = styled(Card)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nexport const GreyCard = styled(Card)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n","import styled from 'styled-components'\n\nconst Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport default Dots\n","import { Currency, ETHER, Token } from '@pancakeswap/sdk'\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'BNB'\n  if (currency instanceof Token) return currency.address\n  throw new Error('invalid currency')\n}\n\nexport default currencyId\n","/**\n * Returns true if the string value is zero in hex\n * @param hexNumberString\n */\nexport default function isZero(hexNumberString: string) {\n  return /^0x0*$/.test(hexNumberString)\n}\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: { [tokenAddress: string]: true } = {}\n\nexport interface LogoProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  srcs: string[]\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback triangle alert\n */\nconst Logo: React.FC<LogoProps> = ({ srcs, alt, ...rest }) => {\n  const [, refresh] = useState<number>(0)\n\n  const src: string | undefined = srcs.find((s) => !BAD_SRCS[s])\n\n  if (src) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS[src] = true\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default Logo\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Token, TokenAmount } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nfunction useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')?.result?.[0]\n\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined\n}\n\nexport default useTotalSupply\n","import React, { useState } from 'react'\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTotalSupply from '../../hooks/useTotalSupply'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport { BIG_INT_ZERO } from '../../config/constants'\nimport Dots from '../Loader/Dots'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n}\n\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\n                  </Text>\n                  {token0Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\n                  </Text>\n                  {token1Deposited ? (\n                    <RowFixed>\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                    </RowFixed>\n                  ) : (\n                    '-'\n                  )}\n                </FixedHeightRow>\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        <LightCard>\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"pancake-icon\">\n              🥞\n            </span>{' '}\n            {t(\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\n            )}\n          </Text>\n        </LightCard>\n      )}\n    </>\n  )\n}\n\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\n  const { account } = useActiveWeb3React()\n\n  const currency0 = unwrappedToken(pair.token0)\n  const currency1 = unwrappedToken(pair.token1)\n\n  const [showMore, setShowMore] = useState(false)\n\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\n\n  const poolTokenPercentage =\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\n      : undefined\n\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return (\n    <Card style={{ borderRadius: '12px' }} {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency0} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency0.symbol}\n              </Text>\n            </RowFixed>\n            {token0Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <RowFixed>\n              <CurrencyLogo size=\"20px\" currency={currency1} />\n              <Text color=\"textSubtle\" ml=\"4px\">\n                Pooled {currency1.symbol}\n              </Text>\n            </RowFixed>\n            {token1Deposited ? (\n              <RowFixed>\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n              </RowFixed>\n            ) : (\n              '-'\n            )}\n          </FixedHeightRow>\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">Share of pool</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={Link}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                Remove\n              </Button>\n              <Button\n                as={Link}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                Add liquidity instead\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubNav from 'components/Menu/SubNav'\nimport { useTranslation } from 'contexts/Localization'\n\nconst SwapWrapper = styled.div`\n  background-color: #910101;\n  padding-bottom: 60px;\n`\n\nconst Banner = () => {\n  return (\n    <>\n      <div className='banner-wrapper-area hide-ifMobile'>\n        <div className='container'>\n          <div className='row align-items-center m-0'>\n            <div className='col-xl-8 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-content'>\n                <h2>ZAP MIRRORS PANCAKESWAP TO EXECUTE QUICK TOKEN SWAP CONVERSION</h2>\n              </div>\n            </div>\n            <div className='col-xl-4 col-lg-6 col-md-12 p-0'>\n              <div className='banner-wrapper-image'>\n                <img src='/images/decor-img.png' alt='logo' />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Page: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <SwapWrapper {...props}>\n        <h1 className=\"page-red-header hide-ifMobile\">{t(\"ZAP\")}</h1>\n        {/* remove padding top when openback subnav */}\n        <div className=\"swap-container\">\n          {/* <SubNav /> */}\n          {children}\n        </div>\n      </SwapWrapper>\n    </>\n  )\n}\n\nexport default Page\n","import { useMemo } from 'react'\nimport contenthashToUri from 'utils/contenthashToUri'\nimport { parseENSAddress } from 'utils/ENS/parseENSAddress'\nimport uriToHttp from 'utils/uriToHttp'\nimport useENSContentHash from './ENS/useENSContentHash'\n\nexport default function useHttpLocations(uri: string | undefined): string[] {\n  const ens = useMemo(() => (uri ? parseENSAddress(uri) : undefined), [uri])\n  const resolvedContentHash = useENSContentHash(ens?.ensName)\n  return useMemo(() => {\n    if (ens) {\n      return resolvedContentHash.contenthash ? uriToHttp(contenthashToUri(resolvedContentHash.contenthash)) : []\n    }\n    return uri ? uriToHttp(uri) : []\n  }, [ens, resolvedContentHash.contenthash, uri])\n}\n","import { namehash } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../../state/multicall/hooks'\nimport isZero from '../../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\n\n/**\n * Does a lookup for an ENS name to find its contenthash.\n */\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\n  const ensNodeArgument = useMemo(() => {\n    if (!ensName) return [undefined]\n    try {\n      return ensName ? [namehash(ensName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [ensName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddress = resolverAddressResult.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\n    false,\n  )\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\n\n  return {\n    contenthash: contenthash.result?.[0] ?? null,\n    loading: resolverAddressResult.loading || contenthash.loading,\n  }\n}\n"],"sourceRoot":""}